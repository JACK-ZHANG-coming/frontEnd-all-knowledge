{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\nvar List = Immutable.List,\n  Repeat = Immutable.Repeat,\n  Record = Immutable.Record;\nvar returnTrue = emptyFunction.thatReturnsTrue;\nvar FINGERPRINT_DELIMITER = '-';\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\nvar LeafRange = Record(defaultLeafRange);\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\nvar DecoratorRange = Record(defaultDecoratorRange);\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({\n          start: 0,\n          end: 0\n        }))\n      }));\n    }\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n    var chars = block.getCharacterList();\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n    return List(leafSets);\n  },\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\nfunction areEqual(a, b) {\n  return a === b;\n}\nmodule.exports = BlockTree;","map":{"version":3,"names":["Immutable","require","emptyFunction","findRangesImmutable","List","Repeat","Record","returnTrue","thatReturnsTrue","FINGERPRINT_DELIMITER","defaultLeafRange","start","end","LeafRange","defaultDecoratorRange","decoratorKey","leaves","DecoratorRange","BlockTree","generate","contentState","block","decorator","textLength","getLength","of","leafSets","decorations","getDecorations","chars","getCharacterList","areEqual","push","get","generateLeaves","slice","toList","getFingerprint","tree","map","leafSet","fingerprintString","size","join","characters","offset","inlineStyles","c","getStyle","a","b","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/BlockTree.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule BlockTree\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar emptyFunction = require('fbjs/lib/emptyFunction');\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat,\n    Record = Immutable.Record;\n\n\nvar returnTrue = emptyFunction.thatReturnsTrue;\n\nvar FINGERPRINT_DELIMITER = '-';\n\nvar defaultLeafRange = {\n  start: null,\n  end: null\n};\n\nvar LeafRange = Record(defaultLeafRange);\n\nvar defaultDecoratorRange = {\n  start: null,\n  end: null,\n  decoratorKey: null,\n  leaves: null\n};\n\nvar DecoratorRange = Record(defaultDecoratorRange);\n\nvar BlockTree = {\n  /**\n   * Generate a block tree for a given ContentBlock/decorator pair.\n   */\n  generate: function generate(contentState, block, decorator) {\n    var textLength = block.getLength();\n    if (!textLength) {\n      return List.of(new DecoratorRange({\n        start: 0,\n        end: 0,\n        decoratorKey: null,\n        leaves: List.of(new LeafRange({ start: 0, end: 0 }))\n      }));\n    }\n\n    var leafSets = [];\n    var decorations = decorator ? decorator.getDecorations(block, contentState) : List(Repeat(null, textLength));\n\n    var chars = block.getCharacterList();\n\n    findRangesImmutable(decorations, areEqual, returnTrue, function (start, end) {\n      leafSets.push(new DecoratorRange({\n        start: start,\n        end: end,\n        decoratorKey: decorations.get(start),\n        leaves: generateLeaves(chars.slice(start, end).toList(), start)\n      }));\n    });\n\n    return List(leafSets);\n  },\n\n  /**\n   * Create a string representation of the given tree map. This allows us\n   * to rapidly determine whether a tree has undergone a significant\n   * structural change.\n   */\n  getFingerprint: function getFingerprint(tree) {\n    return tree.map(function (leafSet) {\n      var decoratorKey = leafSet.get('decoratorKey');\n      var fingerprintString = decoratorKey !== null ? decoratorKey + '.' + (leafSet.get('end') - leafSet.get('start')) : '';\n      return '' + fingerprintString + '.' + leafSet.get('leaves').size;\n    }).join(FINGERPRINT_DELIMITER);\n  }\n};\n\n/**\n * Generate LeafRange records for a given character list.\n */\nfunction generateLeaves(characters, offset) {\n  var leaves = [];\n  var inlineStyles = characters.map(function (c) {\n    return c.getStyle();\n  }).toList();\n  findRangesImmutable(inlineStyles, areEqual, returnTrue, function (start, end) {\n    leaves.push(new LeafRange({\n      start: start + offset,\n      end: end + offset\n    }));\n  });\n  return List(leaves);\n}\n\nfunction areEqual(a, b) {\n  return a === b;\n}\n\nmodule.exports = BlockTree;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}