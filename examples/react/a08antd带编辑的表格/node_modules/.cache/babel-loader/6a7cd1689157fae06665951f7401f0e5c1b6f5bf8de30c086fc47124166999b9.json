{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar KeyBindingUtil = require('./KeyBindingUtil');\nvar Keys = require('fbjs/lib/Keys');\nvar SecondaryClipboard = require('./SecondaryClipboard');\nvar UserAgent = require('fbjs/lib/UserAgent');\nvar isEventHandled = require('./isEventHandled');\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\nvar keyCommandUndo = require('./keyCommandUndo');\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault();\n      // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      editor.props.onEscape && editor.props.onEscape(e);\n      return;\n    case Keys.TAB:\n      editor.props.onTab && editor.props.onTab(e);\n      return;\n    case Keys.UP:\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\n      return;\n    case Keys.RIGHT:\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\n      return;\n    case Keys.DOWN:\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\n      return;\n    case Keys.LEFT:\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\n      return;\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n        // Insert a nbsp into the editor.\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\xA0');\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n  }\n  var command = editor.props.keyBindingFn(e);\n\n  // If no command is specified, allow keydown event to continue.\n  if (!command) {\n    return;\n  }\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  }\n\n  // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n  e.preventDefault();\n\n  // Allow components higher up the tree to handle the command first.\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\n    return;\n  }\n  var newState = onKeyCommand(command, editorState);\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\nmodule.exports = editOnKeyDown;","map":{"version":3,"names":["DraftModifier","require","EditorState","KeyBindingUtil","Keys","SecondaryClipboard","UserAgent","isEventHandled","keyCommandBackspaceToStartOfLine","keyCommandBackspaceWord","keyCommandDeleteWord","keyCommandInsertNewline","keyCommandMoveSelectionToEndOfBlock","keyCommandMoveSelectionToStartOfBlock","keyCommandPlainBackspace","keyCommandPlainDelete","keyCommandTransposeCharacters","keyCommandUndo","isOptionKeyCommand","isChrome","isBrowser","onKeyCommand","command","editorState","redo","cut","paste","editOnKeyDown","editor","e","keyCode","which","_latestEditorState","RETURN","preventDefault","props","handleReturn","ESC","onEscape","TAB","onTab","UP","onUpArrow","RIGHT","onRightArrow","DOWN","onDownArrow","LEFT","onLeftArrow","SPACE","contentState","replaceText","getCurrentContent","getSelection","update","push","keyBindingFn","handleKeyCommand","newState","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/editOnKeyDown.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnKeyDown\n * @format\n * \n */\n\n'use strict';\n\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar KeyBindingUtil = require('./KeyBindingUtil');\nvar Keys = require('fbjs/lib/Keys');\nvar SecondaryClipboard = require('./SecondaryClipboard');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar isEventHandled = require('./isEventHandled');\nvar keyCommandBackspaceToStartOfLine = require('./keyCommandBackspaceToStartOfLine');\nvar keyCommandBackspaceWord = require('./keyCommandBackspaceWord');\nvar keyCommandDeleteWord = require('./keyCommandDeleteWord');\nvar keyCommandInsertNewline = require('./keyCommandInsertNewline');\nvar keyCommandMoveSelectionToEndOfBlock = require('./keyCommandMoveSelectionToEndOfBlock');\nvar keyCommandMoveSelectionToStartOfBlock = require('./keyCommandMoveSelectionToStartOfBlock');\nvar keyCommandPlainBackspace = require('./keyCommandPlainBackspace');\nvar keyCommandPlainDelete = require('./keyCommandPlainDelete');\nvar keyCommandTransposeCharacters = require('./keyCommandTransposeCharacters');\nvar keyCommandUndo = require('./keyCommandUndo');\n\nvar isOptionKeyCommand = KeyBindingUtil.isOptionKeyCommand;\n\nvar isChrome = UserAgent.isBrowser('Chrome');\n\n/**\n * Map a `DraftEditorCommand` command value to a corresponding function.\n */\nfunction onKeyCommand(command, editorState) {\n  switch (command) {\n    case 'redo':\n      return EditorState.redo(editorState);\n    case 'delete':\n      return keyCommandPlainDelete(editorState);\n    case 'delete-word':\n      return keyCommandDeleteWord(editorState);\n    case 'backspace':\n      return keyCommandPlainBackspace(editorState);\n    case 'backspace-word':\n      return keyCommandBackspaceWord(editorState);\n    case 'backspace-to-start-of-line':\n      return keyCommandBackspaceToStartOfLine(editorState);\n    case 'split-block':\n      return keyCommandInsertNewline(editorState);\n    case 'transpose-characters':\n      return keyCommandTransposeCharacters(editorState);\n    case 'move-selection-to-start-of-block':\n      return keyCommandMoveSelectionToStartOfBlock(editorState);\n    case 'move-selection-to-end-of-block':\n      return keyCommandMoveSelectionToEndOfBlock(editorState);\n    case 'secondary-cut':\n      return SecondaryClipboard.cut(editorState);\n    case 'secondary-paste':\n      return SecondaryClipboard.paste(editorState);\n    default:\n      return editorState;\n  }\n}\n\n/**\n * Intercept keydown behavior to handle keys and commands manually, if desired.\n *\n * Keydown combinations may be mapped to `DraftCommand` values, which may\n * correspond to command functions that modify the editor or its contents.\n *\n * See `getDefaultKeyBinding` for defaults. Alternatively, the top-level\n * component may provide a custom mapping via the `keyBindingFn` prop.\n */\nfunction editOnKeyDown(editor, e) {\n  var keyCode = e.which;\n  var editorState = editor._latestEditorState;\n\n  switch (keyCode) {\n    case Keys.RETURN:\n      e.preventDefault();\n      // The top-level component may manually handle newline insertion. If\n      // no special handling is performed, fall through to command handling.\n      if (editor.props.handleReturn && isEventHandled(editor.props.handleReturn(e, editorState))) {\n        return;\n      }\n      break;\n    case Keys.ESC:\n      e.preventDefault();\n      editor.props.onEscape && editor.props.onEscape(e);\n      return;\n    case Keys.TAB:\n      editor.props.onTab && editor.props.onTab(e);\n      return;\n    case Keys.UP:\n      editor.props.onUpArrow && editor.props.onUpArrow(e);\n      return;\n    case Keys.RIGHT:\n      editor.props.onRightArrow && editor.props.onRightArrow(e);\n      return;\n    case Keys.DOWN:\n      editor.props.onDownArrow && editor.props.onDownArrow(e);\n      return;\n    case Keys.LEFT:\n      editor.props.onLeftArrow && editor.props.onLeftArrow(e);\n      return;\n    case Keys.SPACE:\n      // Handling for OSX where option + space scrolls.\n      if (isChrome && isOptionKeyCommand(e)) {\n        e.preventDefault();\n        // Insert a nbsp into the editor.\n        var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), '\\xA0');\n        editor.update(EditorState.push(editorState, contentState, 'insert-characters'));\n        return;\n      }\n  }\n\n  var command = editor.props.keyBindingFn(e);\n\n  // If no command is specified, allow keydown event to continue.\n  if (!command) {\n    return;\n  }\n\n  if (command === 'undo') {\n    // Since undo requires some special updating behavior to keep the editor\n    // in sync, handle it separately.\n    keyCommandUndo(e, editorState, editor.update);\n    return;\n  }\n\n  // At this point, we know that we're handling a command of some kind, so\n  // we don't want to insert a character following the keydown.\n  e.preventDefault();\n\n  // Allow components higher up the tree to handle the command first.\n  if (editor.props.handleKeyCommand && isEventHandled(editor.props.handleKeyCommand(command, editorState))) {\n    return;\n  }\n\n  var newState = onKeyCommand(command, editorState);\n  if (newState !== editorState) {\n    editor.update(newState);\n  }\n}\n\nmodule.exports = editOnKeyDown;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}