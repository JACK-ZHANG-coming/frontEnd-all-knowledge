{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nimport { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\nvar Record;\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = getNodeChildren(rootChildren) || [];\n  function processNode(node) {\n    var key = node.key,\n      children = node.props.children;\n    if (callback(key, node) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n  nodeList.forEach(processNode);\n}\nexport function getFullKeyList(children) {\n  var _convertTreeToEntitie = convertTreeToEntities(children),\n    keyEntities = _convertTreeToEntitie.keyEntities;\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n  if (!startKey || !endKey) {\n    return [];\n  }\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n    return true;\n  });\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(rootChildren, keys) {\n  var restKeys = _toConsumableArray(keys);\n  var nodes = [];\n  traverseNodesKey(rootChildren, function (key, node) {\n    var index = restKeys.indexOf(key);\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n    return !!restKeys.length;\n  });\n  return nodes;\n}\nexport function getFullKeyListByTreeData(treeData) {\n  var keys = [];\n  (treeData || []).forEach(function (item) {\n    keys.push(item.key);\n    if (item.children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));\n    }\n  });\n  return keys;\n}","map":{"version":3,"names":["_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","getNodeChildren","convertTreeToEntities","Record","traverseNodesKey","rootChildren","callback","nodeList","processNode","node","key","children","props","forEach","getFullKeyList","_convertTreeToEntitie","keyEntities","keys","calcRangeKeys","expandedKeys","startKey","endKey","record","None","matchKey","End","push","Start","indexOf","convertDirectoryKeysToNodes","restKeys","nodes","index","splice","getFullKeyListByTreeData","treeData","item","concat"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/antd/es/tree/util.js"],"sourcesContent":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { getNodeChildren, convertTreeToEntities } from \"rc-tree/es/util\";\nvar Record;\n\n(function (Record) {\n  Record[Record[\"None\"] = 0] = \"None\";\n  Record[Record[\"Start\"] = 1] = \"Start\";\n  Record[Record[\"End\"] = 2] = \"End\";\n})(Record || (Record = {})); // TODO: Move this logic into `rc-tree`\n\n\nfunction traverseNodesKey(rootChildren, callback) {\n  var nodeList = getNodeChildren(rootChildren) || [];\n\n  function processNode(node) {\n    var key = node.key,\n        children = node.props.children;\n\n    if (callback(key, node) !== false) {\n      traverseNodesKey(children, callback);\n    }\n  }\n\n  nodeList.forEach(processNode);\n}\n\nexport function getFullKeyList(children) {\n  var _convertTreeToEntitie = convertTreeToEntities(children),\n      keyEntities = _convertTreeToEntitie.keyEntities;\n\n  return Object.keys(keyEntities);\n}\n/** 计算选中范围，只考虑expanded情况以优化性能 */\n\nexport function calcRangeKeys(rootChildren, expandedKeys, startKey, endKey) {\n  var keys = [];\n  var record = Record.None;\n\n  if (startKey && startKey === endKey) {\n    return [startKey];\n  }\n\n  if (!startKey || !endKey) {\n    return [];\n  }\n\n  function matchKey(key) {\n    return key === startKey || key === endKey;\n  }\n\n  traverseNodesKey(rootChildren, function (key) {\n    if (record === Record.End) {\n      return false;\n    }\n\n    if (matchKey(key)) {\n      // Match test\n      keys.push(key);\n\n      if (record === Record.None) {\n        record = Record.Start;\n      } else if (record === Record.Start) {\n        record = Record.End;\n        return false;\n      }\n    } else if (record === Record.Start) {\n      // Append selection\n      keys.push(key);\n    }\n\n    if (expandedKeys.indexOf(key) === -1) {\n      return false;\n    }\n\n    return true;\n  });\n  return keys;\n}\nexport function convertDirectoryKeysToNodes(rootChildren, keys) {\n  var restKeys = _toConsumableArray(keys);\n\n  var nodes = [];\n  traverseNodesKey(rootChildren, function (key, node) {\n    var index = restKeys.indexOf(key);\n\n    if (index !== -1) {\n      nodes.push(node);\n      restKeys.splice(index, 1);\n    }\n\n    return !!restKeys.length;\n  });\n  return nodes;\n}\nexport function getFullKeyListByTreeData(treeData) {\n  var keys = [];\n  (treeData || []).forEach(function (item) {\n    keys.push(item.key);\n\n    if (item.children) {\n      keys = [].concat(_toConsumableArray(keys), _toConsumableArray(getFullKeyListByTreeData(item.children)));\n    }\n  });\n  return keys;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}