{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { Children } from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from 'warning';\nimport TreeNode from './TreeNode';\nvar DRAG_SIDE_RANGE = 0.25;\nvar DRAG_MIN_GAP = 2;\nvar onlyTreeNodeWarned = false;\nexport function warnOnlyTreeNode() {\n  if (onlyTreeNodeWarned) return;\n  onlyTreeNodeWarned = true;\n  warning(false, 'Tree only accept TreeNode as children.');\n}\nexport function arrDel(list, value) {\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = list.slice();\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getNodeChildren(children) {\n  return toArray(children).filter(isTreeNode);\n}\nexport function isCheckDisabled(node) {\n  var _ref = node.props || {},\n    disabled = _ref.disabled,\n    disableCheckbox = _ref.disableCheckbox,\n    checkable = _ref.checkable;\n  return !!(disabled || disableCheckbox) || checkable === false;\n}\nexport function traverseTreeNodes(treeNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.props.children : treeNodes;\n    var pos = node ? getPosition(parent.pos, index) : 0; // Filter children\n\n    var childList = getNodeChildren(children); // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key || pos,\n        parentPos: parent.node ? parent.pos : null\n      };\n      callback(data);\n    } // Process children node\n\n    Children.forEach(childList, function (subNode, subIndex) {\n      processNode(subNode, subIndex, {\n        node: node,\n        pos: pos\n      });\n    });\n  }\n  processNode(null);\n}\n/**\n * Use `rc-util` `toArray` to get the children list which keeps the key.\n * And return single node if children is only one(This can avoid `key` missing check).\n */\n\nexport function mapChildren(children, func) {\n  var list = toArray(children).map(func);\n  if (list.length === 1) {\n    return list[0];\n  }\n  return list;\n}\nexport function getDragNodesKeys(treeNodes, node) {\n  var _node$props = node.props,\n    eventKey = _node$props.eventKey,\n    pos = _node$props.pos;\n  var dragNodesKeys = [];\n  traverseTreeNodes(treeNodes, function (_ref2) {\n    var key = _ref2.key;\n    dragNodesKeys.push(key);\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n} // Only used when drag, not affect SSR.\n\nexport function calcDropPosition(event, treeNode) {\n  var clientY = event.clientY;\n  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(),\n    top = _treeNode$selectHandl.top,\n    bottom = _treeNode$selectHandl.bottom,\n    height = _treeNode$selectHandl.height;\n  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n  if (clientY <= top + des) {\n    return -1;\n  }\n  if (clientY >= bottom - des) {\n    return 1;\n  }\n  return 0;\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\n\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  var multiple = props.multiple;\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n  return selectedKeys;\n}\n/**\n * Since React internal will convert key to string,\n * we need do this to avoid `checkStrictly` use number match\n */\n\nfunction keyListToString(keyList) {\n  if (!keyList) return keyList;\n  return keyList.map(function (key) {\n    return String(key);\n  });\n}\nvar internalProcessProps = function internalProcessProps(props) {\n  return props;\n};\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n  var _ref3 = processor || {},\n    _ref3$processProps = _ref3.processProps,\n    processProps = _ref3$processProps === void 0 ? internalProcessProps : _ref3$processProps;\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_ref4) {\n    var children = _ref4.children,\n      props = _objectWithoutProperties(_ref4, [\"children\"]);\n    var childrenNodes = convertDataToTree(children, processor);\n    return React.createElement(TreeNode, Object.assign({}, processProps(props)), childrenNodes);\n  });\n}\n/**\n * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`\n * @param treeNodes\n * @param processTreeEntity  User can customize the entity\n */\n\nexport function convertTreeToEntities(treeNodes) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    initWrapper = _ref5.initWrapper,\n    processEntity = _ref5.processEntity,\n    onProcessFinished = _ref5.onProcessFinished;\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n  traverseTreeNodes(treeNodes, function (item) {\n    var node = item.node,\n      index = item.index,\n      pos = item.pos,\n      key = item.key,\n      parentPos = item.parentPos;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos\n    };\n    posEntities[pos] = entity;\n    keyEntities[key] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n  return wrapper;\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\n\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  } // Convert keys to object format\n\n  var keyProps;\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (_typeof(keys) === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n  keyProps.checkedKeys = keyListToString(keyProps.checkedKeys);\n  keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys);\n  return keyProps;\n}\n/**\n * Conduct check state by the keyList. It will conduct up & from the provided key.\n * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.\n */\n\nexport function conductCheck( /** list of keys */\nkeyList, /** is check the node or not */\nisCheck, /** parsed by `convertTreeToEntities` function in Tree */\nkeyEntities) {\n  var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var checkedKeys = {};\n  var halfCheckedKeys = {}; // Record the key has some child checked (include child half checked)\n\n  (checkStatus.checkedKeys || []).forEach(function (key) {\n    checkedKeys[key] = true;\n  });\n  (checkStatus.halfCheckedKeys || []).forEach(function (key) {\n    halfCheckedKeys[key] = true;\n  }); // Conduct up\n\n  function conductUp(key) {\n    if (checkedKeys[key] === isCheck) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    var children = entity.children,\n      parent = entity.parent,\n      node = entity.node;\n    if (isCheckDisabled(node)) return; // Check child node checked status\n\n    var everyChildChecked = true;\n    var someChildChecked = false; // Child checked or half checked\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (_ref6) {\n      var childKey = _ref6.key;\n      var childChecked = checkedKeys[childKey];\n      var childHalfChecked = halfCheckedKeys[childKey];\n      if (childChecked || childHalfChecked) someChildChecked = true;\n      if (!childChecked) everyChildChecked = false;\n    }); // Update checked status\n\n    if (isCheck) {\n      checkedKeys[key] = everyChildChecked;\n    } else {\n      checkedKeys[key] = false;\n    }\n    halfCheckedKeys[key] = someChildChecked;\n    if (parent) {\n      conductUp(parent.key);\n    }\n  } // Conduct down\n\n  function conductDown(key) {\n    if (checkedKeys[key] === isCheck) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    var children = entity.children,\n      node = entity.node;\n    if (isCheckDisabled(node)) return;\n    checkedKeys[key] = isCheck;\n    (children || []).forEach(function (child) {\n      conductDown(child.key);\n    });\n  }\n  function conduct(key) {\n    var entity = keyEntities[key];\n    if (!entity) {\n      warning(false, \"'\".concat(key, \"' does not exist in the tree.\"));\n      return;\n    }\n    var children = entity.children,\n      parent = entity.parent,\n      node = entity.node;\n    checkedKeys[key] = isCheck;\n    if (isCheckDisabled(node)) return; // Conduct down\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (child) {\n      conductDown(child.key);\n    }); // Conduct up\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n  (keyList || []).forEach(function (key) {\n    conduct(key);\n  });\n  var checkedKeyList = [];\n  var halfCheckedKeyList = []; // Fill checked list\n\n  Object.keys(checkedKeys).forEach(function (key) {\n    if (checkedKeys[key]) {\n      checkedKeyList.push(key);\n    }\n  }); // Fill half checked list\n\n  Object.keys(halfCheckedKeys).forEach(function (key) {\n    if (!checkedKeys[key] && halfCheckedKeys[key]) {\n      halfCheckedKeyList.push(key);\n    }\n  });\n  return {\n    checkedKeys: checkedKeyList,\n    halfCheckedKeys: halfCheckedKeyList\n  };\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\n\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = {};\n  function conductUp(key) {\n    if (expandedKeys[key]) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys[key] = true;\n    var parent = entity.parent,\n      node = entity.node;\n    if (node.props && node.props.disabled) return;\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return Object.keys(expandedKeys);\n}\n/**\n * Returns only the data- and aria- key/value pairs\n */\n\nexport function getDataAndAria(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      prev[key] = props[key];\n    }\n    return prev;\n  }, {});\n}","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_objectWithoutProperties","source","excluded","target","_objectWithoutPropertiesLoose","key","i","Object","getOwnPropertySymbols","sourceSymbolKeys","length","indexOf","propertyIsEnumerable","call","sourceKeys","keys","React","Children","toArray","warning","TreeNode","DRAG_SIDE_RANGE","DRAG_MIN_GAP","onlyTreeNodeWarned","warnOnlyTreeNode","arrDel","list","value","clone","slice","index","splice","arrAdd","push","posToArr","pos","split","getPosition","level","concat","isTreeNode","node","type","getNodeChildren","children","filter","isCheckDisabled","_ref","props","disabled","disableCheckbox","checkable","traverseTreeNodes","treeNodes","callback","processNode","parent","childList","data","parentPos","forEach","subNode","subIndex","mapChildren","func","map","getDragNodesKeys","_node$props","eventKey","dragNodesKeys","_ref2","calcDropPosition","event","treeNode","clientY","_treeNode$selectHandl","selectHandle","getBoundingClientRect","top","bottom","height","des","Math","max","calcSelectedKeys","selectedKeys","undefined","multiple","keyListToString","keyList","String","internalProcessProps","convertDataToTree","treeData","processor","_ref3","_ref3$processProps","processProps","Array","isArray","_ref4","childrenNodes","createElement","assign","convertTreeToEntities","_ref5","arguments","initWrapper","processEntity","onProcessFinished","posEntities","keyEntities","wrapper","item","entity","parseCheckedKeys","keyProps","checkedKeys","halfCheckedKeys","checked","halfChecked","conductCheck","isCheck","checkStatus","conductUp","everyChildChecked","someChildChecked","child","_ref6","childKey","childChecked","childHalfChecked","conductDown","conduct","checkedKeyList","halfCheckedKeyList","conductExpandParent","expandedKeys","getDataAndAria","reduce","prev","substr"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-tree/es/util.js"],"sourcesContent":["function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { Children } from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport warning from 'warning';\nimport TreeNode from './TreeNode';\nvar DRAG_SIDE_RANGE = 0.25;\nvar DRAG_MIN_GAP = 2;\nvar onlyTreeNodeWarned = false;\nexport function warnOnlyTreeNode() {\n  if (onlyTreeNodeWarned) return;\n  onlyTreeNodeWarned = true;\n  warning(false, 'Tree only accept TreeNode as children.');\n}\nexport function arrDel(list, value) {\n  var clone = list.slice();\n  var index = clone.indexOf(value);\n\n  if (index >= 0) {\n    clone.splice(index, 1);\n  }\n\n  return clone;\n}\nexport function arrAdd(list, value) {\n  var clone = list.slice();\n\n  if (clone.indexOf(value) === -1) {\n    clone.push(value);\n  }\n\n  return clone;\n}\nexport function posToArr(pos) {\n  return pos.split('-');\n}\nexport function getPosition(level, index) {\n  return \"\".concat(level, \"-\").concat(index);\n}\nexport function isTreeNode(node) {\n  return node && node.type && node.type.isTreeNode;\n}\nexport function getNodeChildren(children) {\n  return toArray(children).filter(isTreeNode);\n}\nexport function isCheckDisabled(node) {\n  var _ref = node.props || {},\n      disabled = _ref.disabled,\n      disableCheckbox = _ref.disableCheckbox,\n      checkable = _ref.checkable;\n\n  return !!(disabled || disableCheckbox) || checkable === false;\n}\nexport function traverseTreeNodes(treeNodes, callback) {\n  function processNode(node, index, parent) {\n    var children = node ? node.props.children : treeNodes;\n    var pos = node ? getPosition(parent.pos, index) : 0; // Filter children\n\n    var childList = getNodeChildren(children); // Process node if is not root\n\n    if (node) {\n      var data = {\n        node: node,\n        index: index,\n        pos: pos,\n        key: node.key || pos,\n        parentPos: parent.node ? parent.pos : null\n      };\n      callback(data);\n    } // Process children node\n\n\n    Children.forEach(childList, function (subNode, subIndex) {\n      processNode(subNode, subIndex, {\n        node: node,\n        pos: pos\n      });\n    });\n  }\n\n  processNode(null);\n}\n/**\n * Use `rc-util` `toArray` to get the children list which keeps the key.\n * And return single node if children is only one(This can avoid `key` missing check).\n */\n\nexport function mapChildren(children, func) {\n  var list = toArray(children).map(func);\n\n  if (list.length === 1) {\n    return list[0];\n  }\n\n  return list;\n}\nexport function getDragNodesKeys(treeNodes, node) {\n  var _node$props = node.props,\n      eventKey = _node$props.eventKey,\n      pos = _node$props.pos;\n  var dragNodesKeys = [];\n  traverseTreeNodes(treeNodes, function (_ref2) {\n    var key = _ref2.key;\n    dragNodesKeys.push(key);\n  });\n  dragNodesKeys.push(eventKey || pos);\n  return dragNodesKeys;\n} // Only used when drag, not affect SSR.\n\nexport function calcDropPosition(event, treeNode) {\n  var clientY = event.clientY;\n\n  var _treeNode$selectHandl = treeNode.selectHandle.getBoundingClientRect(),\n      top = _treeNode$selectHandl.top,\n      bottom = _treeNode$selectHandl.bottom,\n      height = _treeNode$selectHandl.height;\n\n  var des = Math.max(height * DRAG_SIDE_RANGE, DRAG_MIN_GAP);\n\n  if (clientY <= top + des) {\n    return -1;\n  }\n\n  if (clientY >= bottom - des) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * Return selectedKeys according with multiple prop\n * @param selectedKeys\n * @param props\n * @returns [string]\n */\n\nexport function calcSelectedKeys(selectedKeys, props) {\n  if (!selectedKeys) return undefined;\n  var multiple = props.multiple;\n\n  if (multiple) {\n    return selectedKeys.slice();\n  }\n\n  if (selectedKeys.length) {\n    return [selectedKeys[0]];\n  }\n\n  return selectedKeys;\n}\n/**\n * Since React internal will convert key to string,\n * we need do this to avoid `checkStrictly` use number match\n */\n\nfunction keyListToString(keyList) {\n  if (!keyList) return keyList;\n  return keyList.map(function (key) {\n    return String(key);\n  });\n}\n\nvar internalProcessProps = function internalProcessProps(props) {\n  return props;\n};\n\nexport function convertDataToTree(treeData, processor) {\n  if (!treeData) return [];\n\n  var _ref3 = processor || {},\n      _ref3$processProps = _ref3.processProps,\n      processProps = _ref3$processProps === void 0 ? internalProcessProps : _ref3$processProps;\n\n  var list = Array.isArray(treeData) ? treeData : [treeData];\n  return list.map(function (_ref4) {\n    var children = _ref4.children,\n        props = _objectWithoutProperties(_ref4, [\"children\"]);\n\n    var childrenNodes = convertDataToTree(children, processor);\n    return React.createElement(TreeNode, Object.assign({}, processProps(props)), childrenNodes);\n  });\n}\n/**\n * Calculate treeNodes entities. `processTreeEntity` is used for `rc-tree-select`\n * @param treeNodes\n * @param processTreeEntity  User can customize the entity\n */\n\nexport function convertTreeToEntities(treeNodes) {\n  var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      initWrapper = _ref5.initWrapper,\n      processEntity = _ref5.processEntity,\n      onProcessFinished = _ref5.onProcessFinished;\n\n  var posEntities = {};\n  var keyEntities = {};\n  var wrapper = {\n    posEntities: posEntities,\n    keyEntities: keyEntities\n  };\n\n  if (initWrapper) {\n    wrapper = initWrapper(wrapper) || wrapper;\n  }\n\n  traverseTreeNodes(treeNodes, function (item) {\n    var node = item.node,\n        index = item.index,\n        pos = item.pos,\n        key = item.key,\n        parentPos = item.parentPos;\n    var entity = {\n      node: node,\n      index: index,\n      key: key,\n      pos: pos\n    };\n    posEntities[pos] = entity;\n    keyEntities[key] = entity; // Fill children\n\n    entity.parent = posEntities[parentPos];\n\n    if (entity.parent) {\n      entity.parent.children = entity.parent.children || [];\n      entity.parent.children.push(entity);\n    }\n\n    if (processEntity) {\n      processEntity(entity, wrapper);\n    }\n  });\n\n  if (onProcessFinished) {\n    onProcessFinished(wrapper);\n  }\n\n  return wrapper;\n}\n/**\n * Parse `checkedKeys` to { checkedKeys, halfCheckedKeys } style\n */\n\nexport function parseCheckedKeys(keys) {\n  if (!keys) {\n    return null;\n  } // Convert keys to object format\n\n\n  var keyProps;\n\n  if (Array.isArray(keys)) {\n    // [Legacy] Follow the api doc\n    keyProps = {\n      checkedKeys: keys,\n      halfCheckedKeys: undefined\n    };\n  } else if (_typeof(keys) === 'object') {\n    keyProps = {\n      checkedKeys: keys.checked || undefined,\n      halfCheckedKeys: keys.halfChecked || undefined\n    };\n  } else {\n    warning(false, '`checkedKeys` is not an array or an object');\n    return null;\n  }\n\n  keyProps.checkedKeys = keyListToString(keyProps.checkedKeys);\n  keyProps.halfCheckedKeys = keyListToString(keyProps.halfCheckedKeys);\n  return keyProps;\n}\n/**\n * Conduct check state by the keyList. It will conduct up & from the provided key.\n * If the conduct path reach the disabled or already checked / unchecked node will stop conduct.\n */\n\nexport function conductCheck(\n/** list of keys */\nkeyList,\n/** is check the node or not */\nisCheck,\n/** parsed by `convertTreeToEntities` function in Tree */\nkeyEntities) {\n  var checkStatus = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var checkedKeys = {};\n  var halfCheckedKeys = {}; // Record the key has some child checked (include child half checked)\n\n  (checkStatus.checkedKeys || []).forEach(function (key) {\n    checkedKeys[key] = true;\n  });\n  (checkStatus.halfCheckedKeys || []).forEach(function (key) {\n    halfCheckedKeys[key] = true;\n  }); // Conduct up\n\n  function conductUp(key) {\n    if (checkedKeys[key] === isCheck) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    if (isCheckDisabled(node)) return; // Check child node checked status\n\n    var everyChildChecked = true;\n    var someChildChecked = false; // Child checked or half checked\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (_ref6) {\n      var childKey = _ref6.key;\n      var childChecked = checkedKeys[childKey];\n      var childHalfChecked = halfCheckedKeys[childKey];\n      if (childChecked || childHalfChecked) someChildChecked = true;\n      if (!childChecked) everyChildChecked = false;\n    }); // Update checked status\n\n    if (isCheck) {\n      checkedKeys[key] = everyChildChecked;\n    } else {\n      checkedKeys[key] = false;\n    }\n\n    halfCheckedKeys[key] = someChildChecked;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  } // Conduct down\n\n\n  function conductDown(key) {\n    if (checkedKeys[key] === isCheck) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    var children = entity.children,\n        node = entity.node;\n    if (isCheckDisabled(node)) return;\n    checkedKeys[key] = isCheck;\n    (children || []).forEach(function (child) {\n      conductDown(child.key);\n    });\n  }\n\n  function conduct(key) {\n    var entity = keyEntities[key];\n\n    if (!entity) {\n      warning(false, \"'\".concat(key, \"' does not exist in the tree.\"));\n      return;\n    }\n\n    var children = entity.children,\n        parent = entity.parent,\n        node = entity.node;\n    checkedKeys[key] = isCheck;\n    if (isCheckDisabled(node)) return; // Conduct down\n\n    (children || []).filter(function (child) {\n      return !isCheckDisabled(child.node);\n    }).forEach(function (child) {\n      conductDown(child.key);\n    }); // Conduct up\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conduct(key);\n  });\n  var checkedKeyList = [];\n  var halfCheckedKeyList = []; // Fill checked list\n\n  Object.keys(checkedKeys).forEach(function (key) {\n    if (checkedKeys[key]) {\n      checkedKeyList.push(key);\n    }\n  }); // Fill half checked list\n\n  Object.keys(halfCheckedKeys).forEach(function (key) {\n    if (!checkedKeys[key] && halfCheckedKeys[key]) {\n      halfCheckedKeyList.push(key);\n    }\n  });\n  return {\n    checkedKeys: checkedKeyList,\n    halfCheckedKeys: halfCheckedKeyList\n  };\n}\n/**\n * If user use `autoExpandParent` we should get the list of parent node\n * @param keyList\n * @param keyEntities\n */\n\nexport function conductExpandParent(keyList, keyEntities) {\n  var expandedKeys = {};\n\n  function conductUp(key) {\n    if (expandedKeys[key]) return;\n    var entity = keyEntities[key];\n    if (!entity) return;\n    expandedKeys[key] = true;\n    var parent = entity.parent,\n        node = entity.node;\n    if (node.props && node.props.disabled) return;\n\n    if (parent) {\n      conductUp(parent.key);\n    }\n  }\n\n  (keyList || []).forEach(function (key) {\n    conductUp(key);\n  });\n  return Object.keys(expandedKeys);\n}\n/**\n * Returns only the data- and aria- key/value pairs\n */\n\nexport function getDataAndAria(props) {\n  return Object.keys(props).reduce(function (prev, key) {\n    if (key.substr(0, 5) === 'data-' || key.substr(0, 5) === 'aria-') {\n      prev[key] = props[key];\n    }\n\n    return prev;\n  }, {});\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}