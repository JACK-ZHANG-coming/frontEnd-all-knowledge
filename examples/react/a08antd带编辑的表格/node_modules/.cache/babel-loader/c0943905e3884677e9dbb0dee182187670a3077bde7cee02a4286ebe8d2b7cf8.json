{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n  var editorState = editor._latestEditorState;\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\nmodule.exports = editOnBeforeInput;","map":{"version":3,"names":["BlockTree","require","DraftModifier","EditorState","UserAgent","getEntityKeyForSelection","isEventHandled","isSelectionAtLeafStart","nullthrows","setImmediate","FF_QUICKFIND_CHAR","FF_QUICKFIND_LINK_CHAR","isFirefox","isBrowser","mustPreventDefaultForCharacter","character","replaceText","editorState","text","inlineStyle","entityKey","contentState","getCurrentContent","getSelection","push","editOnBeforeInput","editor","e","_pendingStateFromBeforeInput","undefined","update","_latestEditorState","chars","data","props","handleBeforeInput","preventDefault","selection","selectionStart","getStartOffset","selectionEnd","getEndOffset","anchorKey","getAnchorKey","isCollapsed","currentlySelectedChars","getPlainText","slice","forceSelection","merge","focusOffset","getCurrentInlineStyle","newEditorState","mustPreventNative","_latestCommittedEditorState","nativeSelection","global","anchorNode","nodeType","Node","TEXT_NODE","parentNode","nodeName","firstChild","nodeValue","indexOf","originalFingerprint","getFingerprint","getBlockTree","newFingerprint","getDirectionMap","get","set","nativelyRenderedContent","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-core/node_modules/draft-js/lib/editOnBeforeInput.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBeforeInput\n * @format\n * \n */\n\n'use strict';\n\nvar BlockTree = require('./BlockTree');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar UserAgent = require('fbjs/lib/UserAgent');\n\nvar getEntityKeyForSelection = require('./getEntityKeyForSelection');\nvar isEventHandled = require('./isEventHandled');\nvar isSelectionAtLeafStart = require('./isSelectionAtLeafStart');\nvar nullthrows = require('fbjs/lib/nullthrows');\nvar setImmediate = require('fbjs/lib/setImmediate');\n\n// When nothing is focused, Firefox regards two characters, `'` and `/`, as\n// commands that should open and focus the \"quickfind\" search bar. This should\n// *never* happen while a contenteditable is focused, but as of v28, it\n// sometimes does, even when the keypress event target is the contenteditable.\n// This breaks the input. Special case these characters to ensure that when\n// they are typed, we prevent default on the event to make sure not to\n// trigger quickfind.\nvar FF_QUICKFIND_CHAR = \"'\";\nvar FF_QUICKFIND_LINK_CHAR = '/';\nvar isFirefox = UserAgent.isBrowser('Firefox');\n\nfunction mustPreventDefaultForCharacter(character) {\n  return isFirefox && (character == FF_QUICKFIND_CHAR || character == FF_QUICKFIND_LINK_CHAR);\n}\n\n/**\n * Replace the current selection with the specified text string, with the\n * inline style and entity key applied to the newly inserted text.\n */\nfunction replaceText(editorState, text, inlineStyle, entityKey) {\n  var contentState = DraftModifier.replaceText(editorState.getCurrentContent(), editorState.getSelection(), text, inlineStyle, entityKey);\n  return EditorState.push(editorState, contentState, 'insert-characters');\n}\n\n/**\n * When `onBeforeInput` executes, the browser is attempting to insert a\n * character into the editor. Apply this character data to the document,\n * allowing native insertion if possible.\n *\n * Native insertion is encouraged in order to limit re-rendering and to\n * preserve spellcheck highlighting, which disappears or flashes if re-render\n * occurs on the relevant text nodes.\n */\nfunction editOnBeforeInput(editor, e) {\n  if (editor._pendingStateFromBeforeInput !== undefined) {\n    editor.update(editor._pendingStateFromBeforeInput);\n    editor._pendingStateFromBeforeInput = undefined;\n  }\n\n  var editorState = editor._latestEditorState;\n\n  var chars = e.data;\n\n  // In some cases (ex: IE ideographic space insertion) no character data\n  // is provided. There's nothing to do when this happens.\n  if (!chars) {\n    return;\n  }\n\n  // Allow the top-level component to handle the insertion manually. This is\n  // useful when triggering interesting behaviors for a character insertion,\n  // Simple examples: replacing a raw text ':)' with a smile emoji or image\n  // decorator, or setting a block to be a list item after typing '- ' at the\n  // start of the block.\n  if (editor.props.handleBeforeInput && isEventHandled(editor.props.handleBeforeInput(chars, editorState))) {\n    e.preventDefault();\n    return;\n  }\n\n  // If selection is collapsed, conditionally allow native behavior. This\n  // reduces re-renders and preserves spellcheck highlighting. If the selection\n  // is not collapsed, we will re-render.\n  var selection = editorState.getSelection();\n  var selectionStart = selection.getStartOffset();\n  var selectionEnd = selection.getEndOffset();\n  var anchorKey = selection.getAnchorKey();\n\n  if (!selection.isCollapsed()) {\n    e.preventDefault();\n\n    // If the currently selected text matches what the user is trying to\n    // replace it with, let's just update the `SelectionState`. If not, update\n    // the `ContentState` with the new text.\n    var currentlySelectedChars = editorState.getCurrentContent().getPlainText().slice(selectionStart, selectionEnd);\n    if (chars === currentlySelectedChars) {\n      editor.update(EditorState.forceSelection(editorState, selection.merge({\n        focusOffset: selectionEnd\n      })));\n    } else {\n      editor.update(replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection())));\n    }\n    return;\n  }\n\n  var newEditorState = replaceText(editorState, chars, editorState.getCurrentInlineStyle(), getEntityKeyForSelection(editorState.getCurrentContent(), editorState.getSelection()));\n\n  // Bunch of different cases follow where we need to prevent native insertion.\n  var mustPreventNative = false;\n  if (!mustPreventNative) {\n    // Browsers tend to insert text in weird places in the DOM when typing at\n    // the start of a leaf, so we'll handle it ourselves.\n    mustPreventNative = isSelectionAtLeafStart(editor._latestCommittedEditorState);\n  }\n  if (!mustPreventNative) {\n    // Chrome will also split up a node into two pieces if it contains a Tab\n    // char, for no explicable reason. Seemingly caused by this commit:\n    // https://chromium.googlesource.com/chromium/src/+/013ac5eaf3%5E%21/\n    var nativeSelection = global.getSelection();\n    // Selection is necessarily collapsed at this point due to earlier check.\n    if (nativeSelection.anchorNode && nativeSelection.anchorNode.nodeType === Node.TEXT_NODE) {\n      // See isTabHTMLSpanElement in chromium EditingUtilities.cpp.\n      var parentNode = nativeSelection.anchorNode.parentNode;\n      mustPreventNative = parentNode.nodeName === 'SPAN' && parentNode.firstChild.nodeType === Node.TEXT_NODE && parentNode.firstChild.nodeValue.indexOf('\\t') !== -1;\n    }\n  }\n  if (!mustPreventNative) {\n    // Check the old and new \"fingerprints\" of the current block to determine\n    // whether this insertion requires any addition or removal of text nodes,\n    // in which case we would prevent the native character insertion.\n    var originalFingerprint = BlockTree.getFingerprint(editorState.getBlockTree(anchorKey));\n    var newFingerprint = BlockTree.getFingerprint(newEditorState.getBlockTree(anchorKey));\n    mustPreventNative = originalFingerprint !== newFingerprint;\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = mustPreventDefaultForCharacter(chars);\n  }\n  if (!mustPreventNative) {\n    mustPreventNative = nullthrows(newEditorState.getDirectionMap()).get(anchorKey) !== nullthrows(editorState.getDirectionMap()).get(anchorKey);\n  }\n\n  if (mustPreventNative) {\n    e.preventDefault();\n    editor.update(newEditorState);\n    return;\n  }\n\n  // We made it all the way! Let the browser do its thing and insert the char.\n  newEditorState = EditorState.set(newEditorState, {\n    nativelyRenderedContent: newEditorState.getCurrentContent()\n  });\n  // The native event is allowed to occur. To allow user onChange handlers to\n  // change the inserted text, we wait until the text is actually inserted\n  // before we actually update our state. That way when we rerender, the text\n  // we see in the DOM will already have been inserted properly.\n  editor._pendingStateFromBeforeInput = newEditorState;\n  setImmediate(function () {\n    if (editor._pendingStateFromBeforeInput !== undefined) {\n      editor.update(editor._pendingStateFromBeforeInput);\n      editor._pendingStateFromBeforeInput = undefined;\n    }\n  });\n}\n\nmodule.exports = editOnBeforeInput;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}