{"ast":null,"code":"import { BlockMapBuilder, genKey, CharacterMetadata, ContentBlock, convertFromHTML } from 'draft-js';\nimport toArray from 'lodash/toArray';\nimport { List, OrderedSet, Repeat, fromJS } from 'immutable';\nfunction compose() {\n  for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n    argument[_key] = arguments[_key];\n  }\n  var args = arguments;\n  var start = args.length - 1;\n  return function () {\n    var i = start;\n    var result = args[start].apply(this, arguments);\n    while (i--) {\n      result = args[i].call(this, result);\n    }\n    return result;\n  };\n}\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n  return {\n    contentType: 'image',\n    src: imgElement.getAttribute('src'),\n    width: imgElement.getAttribute('width'),\n    height: imgElement.getAttribute('height'),\n    align: imgElement.style.cssFloat\n  };\n};\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n  if (blockSpec == null) {\n    return null;\n  }\n  var tempEl = document.createElement('blockquote');\n  // stringify meta data and insert it as text content of temp HTML element. We will later extract\n  // and parse it.\n  tempEl.innerText = JSON.stringify(blockSpec);\n  return tempEl;\n};\n// Replaces <img> element with our temp element\nvar replaceElement = function replaceElement(oldEl, newEl) {\n  if (!(newEl instanceof HTMLElement)) {\n    return;\n  }\n  var parentNode = oldEl.parentNode;\n  return parentNode.replaceChild(newEl, oldEl);\n};\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\nvar imgReplacer = function imgReplacer(imgElement) {\n  return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n};\n// creates ContentBlock based on provided spec\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n  var key = blockData.key,\n    type = blockData.type,\n    text = blockData.text,\n    data = blockData.data,\n    inlineStyles = blockData.inlineStyles,\n    entityData = blockData.entityData;\n  var blockSpec = {\n    type: type != null ? type : 'unstyled',\n    text: text != null ? text : '',\n    key: key != null ? key : genKey(),\n    data: null,\n    characterList: List([])\n  };\n  if (data) {\n    blockSpec.data = fromJS(data);\n  }\n  if (inlineStyles || entityData) {\n    var entityKey = void 0;\n    if (entityData) {\n      var _type = entityData.type,\n        mutability = entityData.mutability,\n        _data = entityData.data;\n      contentState.createEntity(_type, mutability, _data);\n      entityKey = contentState.getLastCreatedEntityKey();\n    } else {\n      entityKey = null;\n    }\n    var style = OrderedSet(inlineStyles || []);\n    var charData = CharacterMetadata.create({\n      style: style,\n      entityKey: entityKey\n    });\n    blockSpec.characterList = List(Repeat(charData, text.length));\n  }\n  return new ContentBlock(blockSpec);\n};\n// takes HTML string and returns DraftJS ContentState\nexport default function customHTML2Content(HTML, contentState) {\n  var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\n  // replace all <img /> with <blockquote /> elements\n  toArray(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\n  // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n  // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n  var _convertFromHTML = convertFromHTML(tempDoc.body.innerHTML),\n    contentBlocks = _convertFromHTML.contentBlocks;\n  // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n  contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n    if (block.getType() !== 'blockquote') {\n      return contentBlocks.concat(block);\n    }\n    var image = JSON.parse(block.getText());\n    contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n    var entityKey = contentState.getLastCreatedEntityKey();\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    });\n    // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n    // const atomicBlock = createContentBlock(blockSpec)\n    // const spacerBlock = createContentBlock({});\n    var fragmentArray = [new ContentBlock({\n      key: genKey(),\n      type: 'image-block',\n      text: ' ',\n      characterList: List(Repeat(charData, charData.count()))\n    }), new ContentBlock({\n      key: genKey(),\n      type: 'unstyled',\n      text: '',\n      characterList: List()\n    })];\n    return contentBlocks.concat(fragmentArray);\n  }, []);\n  // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n  tempDoc = null;\n  return BlockMapBuilder.createFromArray(contentBlocks);\n}","map":{"version":3,"names":["BlockMapBuilder","genKey","CharacterMetadata","ContentBlock","convertFromHTML","toArray","List","OrderedSet","Repeat","fromJS","compose","_len","arguments","length","argument","Array","_key","args","start","i","result","apply","call","getBlockSpecForElement","imgElement","contentType","src","getAttribute","width","height","align","style","cssFloat","wrapBlockSpec","blockSpec","tempEl","document","createElement","innerText","JSON","stringify","replaceElement","oldEl","newEl","HTMLElement","parentNode","replaceChild","elementToBlockSpecElement","imgReplacer","createContentBlock","blockData","contentState","key","type","text","data","inlineStyles","entityData","characterList","entityKey","_type","mutability","_data","createEntity","getLastCreatedEntityKey","charData","create","customHTML2Content","HTML","tempDoc","DOMParser","parseFromString","querySelectorAll","forEach","_convertFromHTML","body","innerHTML","contentBlocks","reduce","block","getType","concat","image","parse","getText","entity","fragmentArray","count","createFromArray"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-core/es/EditorCore/customHTML2Content.js"],"sourcesContent":["import { BlockMapBuilder, genKey, CharacterMetadata, ContentBlock, convertFromHTML } from 'draft-js';\nimport toArray from 'lodash/toArray';\nimport { List, OrderedSet, Repeat, fromJS } from 'immutable';\nfunction compose() {\n    for (var _len = arguments.length, argument = Array(_len), _key = 0; _key < _len; _key++) {\n        argument[_key] = arguments[_key];\n    }\n\n    var args = arguments;\n    var start = args.length - 1;\n    return function () {\n        var i = start;\n        var result = args[start].apply(this, arguments);\n        while (i--) {\n            result = args[i].call(this, result);\n        }return result;\n    };\n}\n;\n/*\n * Helpers\n */\n// Prepares img meta data object based on img attributes\nvar getBlockSpecForElement = function getBlockSpecForElement(imgElement) {\n    return {\n        contentType: 'image',\n        src: imgElement.getAttribute('src'),\n        width: imgElement.getAttribute('width'),\n        height: imgElement.getAttribute('height'),\n        align: imgElement.style.cssFloat\n    };\n};\n// Wraps meta data in HTML element which is 'understandable' by Draft, I used <blockquote />.\nvar wrapBlockSpec = function wrapBlockSpec(blockSpec) {\n    if (blockSpec == null) {\n        return null;\n    }\n    var tempEl = document.createElement('blockquote');\n    // stringify meta data and insert it as text content of temp HTML element. We will later extract\n    // and parse it.\n    tempEl.innerText = JSON.stringify(blockSpec);\n    return tempEl;\n};\n// Replaces <img> element with our temp element\nvar replaceElement = function replaceElement(oldEl, newEl) {\n    if (!(newEl instanceof HTMLElement)) {\n        return;\n    }\n    var parentNode = oldEl.parentNode;\n    return parentNode.replaceChild(newEl, oldEl);\n};\nvar elementToBlockSpecElement = compose(wrapBlockSpec, getBlockSpecForElement);\nvar imgReplacer = function imgReplacer(imgElement) {\n    return replaceElement(imgElement, elementToBlockSpecElement(imgElement));\n};\n// creates ContentBlock based on provided spec\nvar createContentBlock = function createContentBlock(blockData, contentState) {\n    var key = blockData.key,\n        type = blockData.type,\n        text = blockData.text,\n        data = blockData.data,\n        inlineStyles = blockData.inlineStyles,\n        entityData = blockData.entityData;\n\n    var blockSpec = {\n        type: type != null ? type : 'unstyled',\n        text: text != null ? text : '',\n        key: key != null ? key : genKey(),\n        data: null,\n        characterList: List([])\n    };\n    if (data) {\n        blockSpec.data = fromJS(data);\n    }\n    if (inlineStyles || entityData) {\n        var entityKey = void 0;\n        if (entityData) {\n            var _type = entityData.type,\n                mutability = entityData.mutability,\n                _data = entityData.data;\n\n            contentState.createEntity(_type, mutability, _data);\n            entityKey = contentState.getLastCreatedEntityKey();\n        } else {\n            entityKey = null;\n        }\n        var style = OrderedSet(inlineStyles || []);\n        var charData = CharacterMetadata.create({ style: style, entityKey: entityKey });\n        blockSpec.characterList = List(Repeat(charData, text.length));\n    }\n    return new ContentBlock(blockSpec);\n};\n// takes HTML string and returns DraftJS ContentState\nexport default function customHTML2Content(HTML, contentState) {\n    var tempDoc = new DOMParser().parseFromString(HTML, 'text/html');\n    // replace all <img /> with <blockquote /> elements\n    toArray(tempDoc.querySelectorAll('img')).forEach(imgReplacer);\n    // use DraftJS converter to do initial conversion. I don't provide DOMBuilder and\n    // blockRenderMap arguments here since it should fall back to its default ones, which are fine\n\n    var _convertFromHTML = convertFromHTML(tempDoc.body.innerHTML),\n        contentBlocks = _convertFromHTML.contentBlocks;\n    // now replace <blockquote /> ContentBlocks with 'atomic' ones\n\n\n    contentBlocks = contentBlocks.reduce(function (contentBlocks, block) {\n        if (block.getType() !== 'blockquote') {\n            return contentBlocks.concat(block);\n        }\n        var image = JSON.parse(block.getText());\n        contentState.createEntity('IMAGE-ENTITY', 'IMMUTABLE', image);\n        var entityKey = contentState.getLastCreatedEntityKey();\n        var charData = CharacterMetadata.create({ entity: entityKey });\n        // const blockSpec = Object.assign({ type: 'atomic', text: ' ' }, { entityData })\n        // const atomicBlock = createContentBlock(blockSpec)\n        // const spacerBlock = createContentBlock({});\n        var fragmentArray = [new ContentBlock({\n            key: genKey(),\n            type: 'image-block',\n            text: ' ',\n            characterList: List(Repeat(charData, charData.count()))\n        }), new ContentBlock({\n            key: genKey(),\n            type: 'unstyled',\n            text: '',\n            characterList: List()\n        })];\n        return contentBlocks.concat(fragmentArray);\n    }, []);\n    // console.log('>> customHTML2Content contentBlocks', contentBlocks);\n    tempDoc = null;\n    return BlockMapBuilder.createFromArray(contentBlocks);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}