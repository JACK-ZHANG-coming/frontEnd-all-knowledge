{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftStringKey = require('./DraftStringKey');\nvar encodeEntityRanges = require('./encodeEntityRanges');\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\nvar invariant = require('fbjs/lib/invariant');\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n  return {\n    key: block.getKey(),\n    text: block.getText(),\n    type: block.getType(),\n    depth: block.getDepth(),\n    inlineStyleRanges: encodeInlineStyleRanges(block),\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\n    data: block.getData().toObject()\n  };\n};\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n  if (block instanceof ContentBlock) {\n    rawBlocks.push(createRawBlock(block, entityMap));\n    return;\n  }\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\n  var parentKey = block.getParentKey();\n  var rawBlock = blockCacheRef[block.getKey()] = _extends({}, createRawBlock(block, entityMap), {\n    children: []\n  });\n  if (parentKey) {\n    blockCacheRef[parentKey].children.push(rawBlock);\n    return;\n  }\n  rawBlocks.push(rawBlock);\n};\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n  var entityMap = rawState.entityMap;\n  var rawBlocks = [];\n  var blockCacheRef = {};\n  var entityCacheRef = {};\n  var entityStorageKey = 0;\n  contentState.getBlockMap().forEach(function (block) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      var entityKey = block.getEntityAt(start);\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey);\n      // This makes this function resilient to two entities\n      // erroneously having the same key\n      if (entityCacheRef[stringifiedEntityKey]) {\n        return;\n      }\n      entityCacheRef[stringifiedEntityKey] = entityKey;\n      // we need the `any` casting here since this is a temporary state\n      // where we will later on flip the entity map and populate it with\n      // real entity, at this stage we just need to map back the entity\n      // key used by the BlockNode\n      entityMap[stringifiedEntityKey] = '' + entityStorageKey;\n      entityStorageKey++;\n    });\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n  });\n  return {\n    blocks: rawBlocks,\n    entityMap: entityMap\n  };\n};\n\n// Flip storage map so that our storage keys map to global\n// DraftEntity keys.\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n  var blocks = rawState.blocks,\n    entityMap = rawState.entityMap;\n  var rawEntityMap = {};\n  Object.keys(entityMap).forEach(function (key, index) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    rawEntityMap[index] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n  return {\n    blocks: blocks,\n    entityMap: rawEntityMap\n  };\n};\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n  var rawDraftContentState = {\n    entityMap: {},\n    blocks: []\n  };\n\n  // add blocks\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState);\n\n  // add entities\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n  return rawDraftContentState;\n};\nmodule.exports = convertFromDraftStateToRaw;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","ContentBlock","ContentBlockNode","DraftStringKey","encodeEntityRanges","encodeInlineStyleRanges","invariant","createRawBlock","block","entityStorageMap","getKey","text","getText","type","getType","depth","getDepth","inlineStyleRanges","entityRanges","data","getData","toObject","insertRawBlock","entityMap","rawBlocks","blockCacheRef","push","process","env","NODE_ENV","parentKey","getParentKey","rawBlock","children","encodeRawBlocks","contentState","rawState","entityCacheRef","entityStorageKey","getBlockMap","forEach","findEntityRanges","character","getEntity","start","entityKey","getEntityAt","stringifiedEntityKey","stringify","blocks","encodeRawEntityMap","rawEntityMap","keys","index","entity","unstringify","mutability","getMutability","convertFromDraftStateToRaw","rawDraftContentState","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/convertFromDraftStateToRaw.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule convertFromDraftStateToRaw\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftStringKey = require('./DraftStringKey');\n\nvar encodeEntityRanges = require('./encodeEntityRanges');\nvar encodeInlineStyleRanges = require('./encodeInlineStyleRanges');\nvar invariant = require('fbjs/lib/invariant');\n\nvar createRawBlock = function createRawBlock(block, entityStorageMap) {\n  return {\n    key: block.getKey(),\n    text: block.getText(),\n    type: block.getType(),\n    depth: block.getDepth(),\n    inlineStyleRanges: encodeInlineStyleRanges(block),\n    entityRanges: encodeEntityRanges(block, entityStorageMap),\n    data: block.getData().toObject()\n  };\n};\n\nvar insertRawBlock = function insertRawBlock(block, entityMap, rawBlocks, blockCacheRef) {\n  if (block instanceof ContentBlock) {\n    rawBlocks.push(createRawBlock(block, entityMap));\n    return;\n  }\n\n  !(block instanceof ContentBlockNode) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'block is not a BlockNode') : invariant(false) : void 0;\n\n  var parentKey = block.getParentKey();\n  var rawBlock = blockCacheRef[block.getKey()] = _extends({}, createRawBlock(block, entityMap), {\n    children: []\n  });\n\n  if (parentKey) {\n    blockCacheRef[parentKey].children.push(rawBlock);\n    return;\n  }\n\n  rawBlocks.push(rawBlock);\n};\n\nvar encodeRawBlocks = function encodeRawBlocks(contentState, rawState) {\n  var entityMap = rawState.entityMap;\n\n\n  var rawBlocks = [];\n\n  var blockCacheRef = {};\n  var entityCacheRef = {};\n  var entityStorageKey = 0;\n\n  contentState.getBlockMap().forEach(function (block) {\n    block.findEntityRanges(function (character) {\n      return character.getEntity() !== null;\n    }, function (start) {\n      var entityKey = block.getEntityAt(start);\n      // Stringify to maintain order of otherwise numeric keys.\n      var stringifiedEntityKey = DraftStringKey.stringify(entityKey);\n      // This makes this function resilient to two entities\n      // erroneously having the same key\n      if (entityCacheRef[stringifiedEntityKey]) {\n        return;\n      }\n      entityCacheRef[stringifiedEntityKey] = entityKey;\n      // we need the `any` casting here since this is a temporary state\n      // where we will later on flip the entity map and populate it with\n      // real entity, at this stage we just need to map back the entity\n      // key used by the BlockNode\n      entityMap[stringifiedEntityKey] = '' + entityStorageKey;\n      entityStorageKey++;\n    });\n\n    insertRawBlock(block, entityMap, rawBlocks, blockCacheRef);\n  });\n\n  return {\n    blocks: rawBlocks,\n    entityMap: entityMap\n  };\n};\n\n// Flip storage map so that our storage keys map to global\n// DraftEntity keys.\nvar encodeRawEntityMap = function encodeRawEntityMap(contentState, rawState) {\n  var blocks = rawState.blocks,\n      entityMap = rawState.entityMap;\n\n\n  var rawEntityMap = {};\n\n  Object.keys(entityMap).forEach(function (key, index) {\n    var entity = contentState.getEntity(DraftStringKey.unstringify(key));\n    rawEntityMap[index] = {\n      type: entity.getType(),\n      mutability: entity.getMutability(),\n      data: entity.getData()\n    };\n  });\n\n  return {\n    blocks: blocks,\n    entityMap: rawEntityMap\n  };\n};\n\nvar convertFromDraftStateToRaw = function convertFromDraftStateToRaw(contentState) {\n  var rawDraftContentState = {\n    entityMap: {},\n    blocks: []\n  };\n\n  // add blocks\n  rawDraftContentState = encodeRawBlocks(contentState, rawDraftContentState);\n\n  // add entities\n  rawDraftContentState = encodeRawEntityMap(contentState, rawDraftContentState);\n\n  return rawDraftContentState;\n};\n\nmodule.exports = convertFromDraftStateToRaw;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}