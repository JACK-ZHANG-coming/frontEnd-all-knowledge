{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : void 0;\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var startVersion = expressions[0],\n      endVersion = expressions[1];\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : void 0;\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n  if (range === '') {\n    return true;\n  }\n  var versionComponents = version.split(componentRegex);\n  var _getModifierAndCompon = getModifierAndComponents(range),\n    modifier = _getModifierAndCompon.modifier,\n    rangeComponents = _getModifierAndCompon.rangeComponents;\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n  zeroPad(a, b.length);\n\n  // mark \"x\" and \"*\" components as equal\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n    if (matches) {\n      b[i] = a[i] = '0';\n\n      // final \"*\" greedily zeros all remaining components\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n  zeroPad(b, a.length);\n  return [a, b];\n}\n\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compare(a, b) {\n  !(typeof a === typeof b) ? process.env.NODE_ENV !== 'production' ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : void 0;\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b),\n    aNormalized = _normalizeVersions[0],\n    bNormalized = _normalizeVersions[1];\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n    if (result) {\n      return result;\n    }\n  }\n  return 0;\n}\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function contains(range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\nmodule.exports = VersionRange;","map":{"version":3,"names":["invariant","require","componentRegex","orRegex","rangeRegex","modifierRegex","numericRegex","checkOrExpression","range","version","expressions","split","length","some","VersionRange","contains","trim","checkRangeExpression","process","env","NODE_ENV","checkSimpleExpression","startVersion","endVersion","isSimpleVersion","versionComponents","_getModifierAndCompon","getModifierAndComponents","modifier","rangeComponents","checkLessThan","checkLessThanOrEqual","checkGreaterThanOrEqual","checkGreaterThan","checkApproximateVersion","checkEqual","a","b","compareComponents","result","lowerBound","slice","upperBound","pop","lastIndex","numeric","parseInt","isNumber","matches","match","concat","number","isNaN","isFinite","zeroPad","array","i","normalizeVersions","j","compareNumeric","aPrefix","bPrefix","aNumeric","bNumeric","compare","_normalizeVersions","aNormalized","bNormalized","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/fbjs/lib/VersionRange.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar invariant = require('./invariant');\n\nvar componentRegex = /\\./;\nvar orRegex = /\\|\\|/;\nvar rangeRegex = /\\s+\\-\\s+/;\nvar modifierRegex = /^(<=|<|=|>=|~>|~|>|)?\\s*(.+)/;\nvar numericRegex = /^(\\d*)(.*)/;\n\n/**\n * Splits input `range` on \"||\" and returns true if any subrange matches\n * `version`.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkOrExpression(range, version) {\n  var expressions = range.split(orRegex);\n\n  if (expressions.length > 1) {\n    return expressions.some(function (range) {\n      return VersionRange.contains(range, version);\n    });\n  } else {\n    range = expressions[0].trim();\n    return checkRangeExpression(range, version);\n  }\n}\n\n/**\n * Splits input `range` on \" - \" (the surrounding whitespace is required) and\n * returns true if version falls between the two operands.\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkRangeExpression(range, version) {\n  var expressions = range.split(rangeRegex);\n\n  !(expressions.length > 0 && expressions.length <= 2) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'the \"-\" operator expects exactly 2 operands') : invariant(false) : void 0;\n\n  if (expressions.length === 1) {\n    return checkSimpleExpression(expressions[0], version);\n  } else {\n    var startVersion = expressions[0],\n        endVersion = expressions[1];\n\n    !(isSimpleVersion(startVersion) && isSimpleVersion(endVersion)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'operands to the \"-\" operator must be simple (no modifiers)') : invariant(false) : void 0;\n\n    return checkSimpleExpression('>=' + startVersion, version) && checkSimpleExpression('<=' + endVersion, version);\n  }\n}\n\n/**\n * Checks if `range` matches `version`. `range` should be a \"simple\" range (ie.\n * not a compound range using the \" - \" or \"||\" operators).\n *\n * @param {string} range\n * @param {string} version\n * @returns {boolean}\n */\nfunction checkSimpleExpression(range, version) {\n  range = range.trim();\n  if (range === '') {\n    return true;\n  }\n\n  var versionComponents = version.split(componentRegex);\n\n  var _getModifierAndCompon = getModifierAndComponents(range),\n      modifier = _getModifierAndCompon.modifier,\n      rangeComponents = _getModifierAndCompon.rangeComponents;\n\n  switch (modifier) {\n    case '<':\n      return checkLessThan(versionComponents, rangeComponents);\n    case '<=':\n      return checkLessThanOrEqual(versionComponents, rangeComponents);\n    case '>=':\n      return checkGreaterThanOrEqual(versionComponents, rangeComponents);\n    case '>':\n      return checkGreaterThan(versionComponents, rangeComponents);\n    case '~':\n    case '~>':\n      return checkApproximateVersion(versionComponents, rangeComponents);\n    default:\n      return checkEqual(versionComponents, rangeComponents);\n  }\n}\n\n/**\n * Checks whether `a` is less than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThan(a, b) {\n  return compareComponents(a, b) === -1;\n}\n\n/**\n * Checks whether `a` is less than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkLessThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === -1 || result === 0;\n}\n\n/**\n * Checks whether `a` is equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkEqual(a, b) {\n  return compareComponents(a, b) === 0;\n}\n\n/**\n * Checks whether `a` is greater than or equal to `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThanOrEqual(a, b) {\n  var result = compareComponents(a, b);\n  return result === 1 || result === 0;\n}\n\n/**\n * Checks whether `a` is greater than `b`.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkGreaterThan(a, b) {\n  return compareComponents(a, b) === 1;\n}\n\n/**\n * Checks whether `a` is \"reasonably close\" to `b` (as described in\n * https://www.npmjs.org/doc/misc/semver.html). For example, if `b` is \"1.3.1\"\n * then \"reasonably close\" is defined as \">= 1.3.1 and < 1.4\".\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {boolean}\n */\nfunction checkApproximateVersion(a, b) {\n  var lowerBound = b.slice();\n  var upperBound = b.slice();\n\n  if (upperBound.length > 1) {\n    upperBound.pop();\n  }\n  var lastIndex = upperBound.length - 1;\n  var numeric = parseInt(upperBound[lastIndex], 10);\n  if (isNumber(numeric)) {\n    upperBound[lastIndex] = numeric + 1 + '';\n  }\n\n  return checkGreaterThanOrEqual(a, lowerBound) && checkLessThan(a, upperBound);\n}\n\n/**\n * Extracts the optional modifier (<, <=, =, >=, >, ~, ~>) and version\n * components from `range`.\n *\n * For example, given `range` \">= 1.2.3\" returns an object with a `modifier` of\n * `\">=\"` and `components` of `[1, 2, 3]`.\n *\n * @param {string} range\n * @returns {object}\n */\nfunction getModifierAndComponents(range) {\n  var rangeComponents = range.split(componentRegex);\n  var matches = rangeComponents[0].match(modifierRegex);\n  !matches ? process.env.NODE_ENV !== 'production' ? invariant(false, 'expected regex to match but it did not') : invariant(false) : void 0;\n\n  return {\n    modifier: matches[1],\n    rangeComponents: [matches[2]].concat(rangeComponents.slice(1))\n  };\n}\n\n/**\n * Determines if `number` is a number.\n *\n * @param {mixed} number\n * @returns {boolean}\n */\nfunction isNumber(number) {\n  return !isNaN(number) && isFinite(number);\n}\n\n/**\n * Tests whether `range` is a \"simple\" version number without any modifiers\n * (\">\", \"~\" etc).\n *\n * @param {string} range\n * @returns {boolean}\n */\nfunction isSimpleVersion(range) {\n  return !getModifierAndComponents(range).modifier;\n}\n\n/**\n * Zero-pads array `array` until it is at least `length` long.\n *\n * @param {array} array\n * @param {number} length\n */\nfunction zeroPad(array, length) {\n  for (var i = array.length; i < length; i++) {\n    array[i] = '0';\n  }\n}\n\n/**\n * Normalizes `a` and `b` in preparation for comparison by doing the following:\n *\n * - zero-pads `a` and `b`\n * - marks any \"x\", \"X\" or \"*\" component in `b` as equivalent by zero-ing it out\n *   in both `a` and `b`\n * - marks any final \"*\" component in `b` as a greedy wildcard by zero-ing it\n *   and all of its successors in `a`\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {array<array<string>>}\n */\nfunction normalizeVersions(a, b) {\n  a = a.slice();\n  b = b.slice();\n\n  zeroPad(a, b.length);\n\n  // mark \"x\" and \"*\" components as equal\n  for (var i = 0; i < b.length; i++) {\n    var matches = b[i].match(/^[x*]$/i);\n    if (matches) {\n      b[i] = a[i] = '0';\n\n      // final \"*\" greedily zeros all remaining components\n      if (matches[0] === '*' && i === b.length - 1) {\n        for (var j = i; j < a.length; j++) {\n          a[j] = '0';\n        }\n      }\n    }\n  }\n\n  zeroPad(b, a.length);\n\n  return [a, b];\n}\n\n/**\n * Returns the numerical -- not the lexicographical -- ordering of `a` and `b`.\n *\n * For example, `10-alpha` is greater than `2-beta`.\n *\n * @param {string} a\n * @param {string} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareNumeric(a, b) {\n  var aPrefix = a.match(numericRegex)[1];\n  var bPrefix = b.match(numericRegex)[1];\n  var aNumeric = parseInt(aPrefix, 10);\n  var bNumeric = parseInt(bPrefix, 10);\n\n  if (isNumber(aNumeric) && isNumber(bNumeric) && aNumeric !== bNumeric) {\n    return compare(aNumeric, bNumeric);\n  } else {\n    return compare(a, b);\n  }\n}\n\n/**\n * Returns the ordering of `a` and `b`.\n *\n * @param {string|number} a\n * @param {string|number} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compare(a, b) {\n  !(typeof a === typeof b) ? process.env.NODE_ENV !== 'production' ? invariant(false, '\"a\" and \"b\" must be of the same type') : invariant(false) : void 0;\n\n  if (a > b) {\n    return 1;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 0;\n  }\n}\n\n/**\n * Compares arrays of version components.\n *\n * @param {array<string>} a\n * @param {array<string>} b\n * @returns {number} -1, 0 or 1 to indicate whether `a` is less than, equal to,\n * or greater than `b`, respectively\n */\nfunction compareComponents(a, b) {\n  var _normalizeVersions = normalizeVersions(a, b),\n      aNormalized = _normalizeVersions[0],\n      bNormalized = _normalizeVersions[1];\n\n  for (var i = 0; i < bNormalized.length; i++) {\n    var result = compareNumeric(aNormalized[i], bNormalized[i]);\n    if (result) {\n      return result;\n    }\n  }\n\n  return 0;\n}\n\nvar VersionRange = {\n  /**\n   * Checks whether `version` satisfies the `range` specification.\n   *\n   * We support a subset of the expressions defined in\n   * https://www.npmjs.org/doc/misc/semver.html:\n   *\n   *    version   Must match version exactly\n   *    =version  Same as just version\n   *    >version  Must be greater than version\n   *    >=version Must be greater than or equal to version\n   *    <version  Must be less than version\n   *    <=version Must be less than or equal to version\n   *    ~version  Must be at least version, but less than the next significant\n   *              revision above version:\n   *              \"~1.2.3\" is equivalent to \">= 1.2.3 and < 1.3\"\n   *    ~>version Equivalent to ~version\n   *    1.2.x     Must match \"1.2.x\", where \"x\" is a wildcard that matches\n   *              anything\n   *    1.2.*     Similar to \"1.2.x\", but \"*\" in the trailing position is a\n   *              \"greedy\" wildcard, so will match any number of additional\n   *              components:\n   *              \"1.2.*\" will match \"1.2.1\", \"1.2.1.1\", \"1.2.1.1.1\" etc\n   *    *         Any version\n   *    \"\"        (Empty string) Same as *\n   *    v1 - v2   Equivalent to \">= v1 and <= v2\"\n   *    r1 || r2  Passes if either r1 or r2 are satisfied\n   *\n   * @param {string} range\n   * @param {string} version\n   * @returns {boolean}\n   */\n  contains: function contains(range, version) {\n    return checkOrExpression(range.trim(), version.trim());\n  }\n};\n\nmodule.exports = VersionRange;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}