{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\nvar Select = /*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Select, _React$Component);\n  function Select(_props) {\n    var _this;\n    _classCallCheck(this, Select);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorBlur\", function () {\n      _this.setState({\n        focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onComponentKeyDown\", function (event) {\n      var open = _this.state.open;\n      var keyCode = event.keyCode;\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          _this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        _this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDeselect\", function (wrappedValue, node, nodeEventInfo) {\n      var onDeselect = _this.props.onDeselect;\n      if (!onDeselect) return;\n      onDeselect(wrappedValue, node, nodeEventInfo);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorClear\", function (event) {\n      var disabled = _this.props.disabled;\n      if (disabled) return;\n      _this.triggerChange([], []);\n      if (!_this.isSearchValueControlled()) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n      event.stopPropagation();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onMultipleSelectorRemove\", function (event, removeValue) {\n      event.stopPropagation();\n      var _this$state = _this.state,\n        valueList = _this$state.valueList,\n        missValueList = _this$state.missValueList,\n        valueEntities = _this$state.valueEntities;\n      var _this$props = _this.props,\n        treeCheckable = _this$props.treeCheckable,\n        treeCheckStrictly = _this$props.treeCheckStrictly,\n        treeNodeLabelProp = _this$props.treeNodeLabelProp,\n        disabled = _this$props.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref) {\n            var value = _ref.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            return value !== removeValue;\n          });\n        }\n      }\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref3) {\n          var value = _ref3.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n          var node = _ref4.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node,\n            pos = _ref5.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n            var node = _ref6.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n          var value = _ref7.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n      var newMissValueList = missValueList.filter(function (_ref8) {\n        var value = _ref8.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n      _this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n      _this.triggerChange(newMissValueList, newValueList, extraInfo);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onValueTrigger\", function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.props.value;\n      var _this$state2 = _this.state,\n        missValueList = _this$state2.missValueList,\n        valueEntities = _this$state2.valueEntities,\n        keyEntities = _this$state2.keyEntities,\n        searchValue = _this$state2.searchValue;\n      var _this$props2 = _this.props,\n        disabled = _this$props2.disabled,\n        inputValue = _this$props2.inputValue,\n        treeNodeLabelProp = _this$props2.treeNodeLabelProp,\n        onSelect = _this$props2.onSelect,\n        onSearch = _this$props2.onSearch,\n        multiple = _this$props2.multiple,\n        treeCheckable = _this$props2.treeCheckable,\n        treeCheckStrictly = _this$props2.treeCheckStrictly,\n        autoClearSearchValue = _this$props2.autoClearSearchValue;\n      var label = node.props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n      if (isAdd) {\n        if (onSelect) {\n          onSelect(wrappedValue, node, nodeEventInfo);\n        }\n      } else {\n        _this.onDeselect(wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n      var newValueList = nodeList.map(function (_ref9) {\n        var props = _ref9.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n        newValueList = keyList.map(function (key) {\n          var props = keyEntities[key].node.props;\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!_this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          _this.setUncontrolledState({\n            searchValue: '',\n            filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n        if (onSearch && searchValue && searchValue.length) {\n          onSearch('');\n        }\n      } // [Legacy] Provide extra info\n\n      var extraInfo = _objectSpread({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n      _this.triggerChange(missValueList, newValueList, extraInfo);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeSelect\", function (_, nodeEventInfo) {\n      var _this$state3 = _this.state,\n        valueList = _this$state3.valueList,\n        valueEntities = _this$state3.valueEntities;\n      var _this$props3 = _this.props,\n        treeCheckable = _this$props3.treeCheckable,\n        multiple = _this$props3.multiple;\n      if (treeCheckable) return;\n      if (!multiple) {\n        _this.setOpenState(false);\n      }\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.props.value;\n      var newValueList;\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n      _this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeCheck\", function (_, nodeEventInfo) {\n      var _this$state4 = _this.state,\n        searchValue = _this$state4.searchValue,\n        keyEntities = _this$state4.keyEntities,\n        valueEntities = _this$state4.valueEntities,\n        valueList = _this$state4.valueList;\n      var treeCheckStrictly = _this.props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n        checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n            var value = _ref16.props.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities[key].node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities[key]);\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n      _this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDropdownVisibleChange\", function (open) {\n      var _this$props4 = _this.props,\n        multiple = _this$props4.multiple,\n        treeCheckable = _this$props4.treeCheckable;\n      var searchValue = _this.state.searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && searchValue) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n      _this.setOpenState(open, true);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputChange\", function (_ref17) {\n      var value = _ref17.target.value;\n      var _this$state5 = _this.state,\n        treeNodes = _this$state5.treeNodes,\n        valueEntities = _this$state5.valueEntities;\n      var _this$props5 = _this.props,\n        onSearch = _this$props5.onSearch,\n        filterTreeNode = _this$props5.filterTreeNode,\n        treeNodeFilterProp = _this$props5.treeNodeFilterProp;\n      if (onSearch) {\n        onSearch(value);\n      }\n      var isSet = false;\n      if (!_this.isSearchValueControlled()) {\n        isSet = _this.setUncontrolledState({\n          searchValue: value\n        });\n        _this.setOpenState(true);\n      }\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n        _this.setState({\n          filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputKeyDown\", function (event) {\n      var _this$state6 = _this.state,\n        searchValue = _this$state6.searchValue,\n        valueList = _this$state6.valueList;\n      var keyCode = event.keyCode;\n      if (KeyCode.BACKSPACE === keyCode && _this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n        _this.onMultipleSelectorRemove(event, lastValue);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChoiceAnimationLeave\", function () {\n      raf(function () {\n        _this.forcePopupAlign();\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setPopupRef\", function (popup) {\n      _this.popup = popup;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setUncontrolledState\", function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n      if (needSync) {\n        _this.setState(newState);\n      }\n      return needSync;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"setOpenState\", function (open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var onDropdownVisibleChange = _this.props.onDropdownVisibleChange;\n      if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n      _this.setUncontrolledState({\n        open: open\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isMultiple\", function () {\n      var _this$props6 = _this.props,\n        multiple = _this$props6.multiple,\n        treeCheckable = _this$props6.treeCheckable;\n      return !!(multiple || treeCheckable);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isLabelInValue\", function () {\n      return isLabelInValue(_this.props);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isSearchValueControlled\", function () {\n      var inputValue = _this.props.inputValue;\n      if ('searchValue' in _this.props) return true;\n      return 'inputValue' in _this.props && inputValue !== null;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"forcePopupAlign\", function () {\n      var $trigger = _this.selectTriggerRef.current;\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"delayForcePopupAlign\", function () {\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this.forcePopupAlign);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"triggerChange\", function (missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$state7 = _this.state,\n        valueEntities = _this$state7.valueEntities,\n        searchValue = _this$state7.searchValue,\n        prevSelectorValueList = _this$state7.selectorValueList;\n      var _this$props7 = _this.props,\n        onChange = _this$props7.onChange,\n        disabled = _this$props7.disabled,\n        treeCheckable = _this$props7.treeCheckable,\n        treeCheckStrictly = _this$props7.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _objectSpread({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref18) {\n          var label = _ref18.label,\n            value = _ref18.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n      var selectorValueList = formatSelectorValue(valueList, _this.props, valueEntities);\n      if (!('value' in _this.props)) {\n        var newState = {\n          missValueList: missValueList,\n          valueList: valueList,\n          selectorValueList: selectorValueList\n        };\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n        _this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n      if (onChange) {\n        var connectValueList; // Get value by mode\n\n        if (_this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n        var labelList = null;\n        var returnValue;\n        if (_this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref19) {\n            var label = _ref19.label,\n              value = _ref19.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref20) {\n            var label = _ref20.label,\n              value = _ref20.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n        if (!_this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n        onChange(returnValue, labelList, extra);\n      }\n    });\n    var prefixAria = _props.prefixAria,\n      defaultOpen = _props.defaultOpen,\n      _open = _props.open;\n    _this.state = {\n      open: _open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    return _this;\n  }\n  _createClass(Select, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props8 = this.props,\n        autoFocus = _this$props8.autoFocus,\n        disabled = _this$props8.disabled;\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var _this2 = this;\n      var prefixCls = this.props.prefixCls;\n      var _this$state8 = this.state,\n        valueList = _this$state8.valueList,\n        open = _this$state8.open,\n        selectorValueList = _this$state8.selectorValueList,\n        valueEntities = _this$state8.valueEntities;\n      var isMultiple = this.isMultiple();\n      if (prevState.valueList !== valueList) {\n        this.forcePopupAlign();\n      } // Scroll to value position, only need sync on single mode\n\n      if (!isMultiple && selectorValueList.length && !prevState.open && open && this.popup) {\n        var value = selectorValueList[0].value;\n        var _this$popup$getTree = this.popup.getTree(),\n          domTreeNodes = _this$popup$getTree.domTreeNodes;\n        var _ref21 = valueEntities[value] || {},\n          key = _ref21.key;\n        var treeNode = domTreeNodes[key];\n        if (treeNode) {\n          var domNode = findDOMNode(treeNode);\n          raf(function () {\n            var popupNode = findDOMNode(_this2.popup);\n            var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n            var searchNode = _this2.popup.searchRef.current;\n            if (domNode && triggerContainer && searchNode) {\n              scrollIntoView(domNode, triggerContainer, {\n                onlyScrollIfNeeded: true,\n                offsetTop: searchNode.offsetHeight\n              });\n            }\n          });\n        }\n      }\n    } // ==================== Selector ====================\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state9 = this.state,\n        valueList = _this$state9.valueList,\n        missValueList = _this$state9.missValueList,\n        selectorValueList = _this$state9.selectorValueList,\n        searchHalfCheckedKeys = _this$state9.searchHalfCheckedKeys,\n        valueEntities = _this$state9.valueEntities,\n        keyEntities = _this$state9.keyEntities,\n        searchValue = _this$state9.searchValue,\n        open = _this$state9.open,\n        focused = _this$state9.focused,\n        treeNodes = _this$state9.treeNodes,\n        filteredTreeNodes = _this$state9.filteredTreeNodes;\n      var _this$props9 = this.props,\n        prefixCls = _this$props9.prefixCls,\n        treeExpandedKeys = _this$props9.treeExpandedKeys,\n        onTreeExpand = _this$props9.onTreeExpand;\n      var isMultiple = this.isMultiple();\n      var passProps = _objectSpread({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n        ariaId: this.ariaId\n      });\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({\n        ref: this.setPopupRef\n      }, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n        prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n        treeCheckStrictly = nextProps.treeCheckStrictly,\n        filterTreeNode = nextProps.filterTreeNode,\n        treeNodeFilterProp = nextProps.treeNodeFilterProp,\n        treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n        return false;\n      }\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n            label = wrapperValue.label;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n          valueLabels[value] = label;\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n            checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n          newState.valueList = checkedKeys.map(function (key) {\n            var val = (newState.keyEntities || prevState.keyEntities)[key].value;\n            var wrappedValue = {\n              value: val\n            };\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n            return wrappedValue;\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n  return Select;\n}(React.Component);\n_defineProperty(Select, \"propTypes\", {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.node,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n});\n_defineProperty(Select, \"childContextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes, {}, multipleSelectorContextTypes, {}, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n});\n_defineProperty(Select, \"defaultProps\", {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n});\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;","map":{"version":3,"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","toString","Array","from","isArray","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","configurable","writable","_createClass","protoProps","staticProps","_possibleConstructorReturn","self","_assertThisInitialized","_getPrototypeOf","o","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","_inherits","subClass","superClass","create","constructor","value","_setPrototypeOf","p","obj","React","findDOMNode","PropTypes","polyfill","KeyCode","shallowEqual","raf","scrollIntoView","SelectTrigger","selectorContextTypes","popupContextTypes","SingleSelector","MultipleSelector","multipleSelectorContextTypes","SinglePopup","MultiplePopup","SHOW_ALL","SHOW_PARENT","SHOW_CHILD","createRef","generateAriaId","formatInternalValue","formatSelectorValue","parseSimpleTreeData","convertDataToTree","convertTreeToEntities","conductCheck","getHalfCheckedKeys","flatToHierarchy","isPosRelated","isLabelInValue","getFilterTree","cleanEntity","findPopupContainer","valueProp","SelectNode","Select","_React$Component","_props","_this","setState","focused","event","open","state","keyCode","ENTER","DOWN","indexOf","setOpenState","ESC","UP","LEFT","RIGHT","stopPropagation","wrappedValue","node","nodeEventInfo","onDeselect","disabled","triggerChange","isSearchValueControlled","setUncontrolledState","searchValue","filteredTreeNodes","removeValue","_this$state","valueList","missValueList","valueEntities","_this$props","treeCheckable","treeCheckStrictly","treeNodeLabelProp","triggerEntity","newValueList","_ref","entity","pos","_ref2","triggerNode","extraInfo","triggerValue","deselectInfo","filteredEntityList","map","_ref3","checked","checkedNodes","_ref4","checkedNodesPositions","_ref5","allCheckedNodes","_ref6","selected","selectedNodes","_ref7","newMissValueList","_ref8","label","isAdd","nodeList","nodeExtraInfo","_this$state2","keyEntities","_this$props2","inputValue","onSelect","onSearch","multiple","autoClearSearchValue","_ref9","keyList","_ref10","val","checkedKeys","_","_this$state3","_this$props3","selectedValue","_ref11","_ref12","_ref13","onValueTrigger","_this$state4","checkedNodeList","oriKeyList","_ref14","_ref15","Set","concat","_ref16","eventKey","_this$props4","_ref17","_this$state5","treeNodes","_this$props5","filterTreeNode","treeNodeFilterProp","isSet","upperSearchValue","String","toUpperCase","filterTreeNodeFn","nodeValue","_this$state6","BACKSPACE","isMultiple","lastValue","onMultipleSelectorRemove","forcePopupAlign","popup","needSync","newState","name","byTrigger","undefined","onDropdownVisibleChange","documentClickClose","_this$props6","$trigger","selectTriggerRef","current","_this$state7","prevSelectorValueList","selectorValueList","_this$props7","onChange","extra","preValue","_ref18","searchHalfCheckedKeys","connectValueList","slice","labelList","returnValue","_ref19","_ref20","prefixAria","defaultOpen","_open","init","selectorRef","ariaId","getChildContext","rcTreeSelect","onSelectorFocus","onSelectorBlur","onSelectorKeyDown","onComponentKeyDown","onSelectorClear","onTreeNodeSelect","onTreeNodeCheck","onPopupKeyDown","onSearchInputChange","onSearchInputKeyDown","componentDidMount","_this$props8","autoFocus","focus","componentDidUpdate","prevState","_this2","prefixCls","_this$state8","_this$popup$getTree","getTree","domTreeNodes","_ref21","treeNode","domNode","popupNode","triggerContainer","searchNode","searchRef","onlyScrollIfNeeded","offsetTop","offsetHeight","blur","render","_this$state9","_this$props9","treeExpandedKeys","onTreeExpand","passProps","onChoiceAnimationLeave","dropdownPrefixCls","Popup","$popup","createElement","ref","setPopupRef","onTreeExpanded","delayForcePopupAlign","Selector","$selector","popupElement","onKeyDown","getDerivedStateFromProps","nextProps","_prevState$prevProps","prevProps","treeDataSimpleMode","processState","propName","updater","valueRefresh","propValue","treeDataChanged","treeDataModeChanged","prevValue","prev","simpleMapper","id","pId","rootPId","treeData","entitiesMap","posEntities","filteredValueList","latestValueList","valueLabels","wrapperValue","_conductCheck","Component","string","bool","showArrow","defaultValue","showSearch","placeholder","searchPlaceholder","children","labelInValue","maxTagCount","number","maxTagPlaceholder","oneOfType","func","maxTagTextLength","showCheckedStrategy","oneOf","dropdownMatchSelectWidth","array","treeIcon","treeLine","treeDefaultExpandAll","treeDefaultExpandedKeys","loadData","notFoundContent","inputIcon","clearIcon","removeIcon","switcherIcon","shape","TreeNode","displayName"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-tree-select/es/Select.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * ARIA: https://www.w3.org/TR/wai-aria/#combobox\n * Sample 1: https://www.w3.org/TR/2017/NOTE-wai-aria-practices-1.1-20171214/examples/combobox/aria1.1pattern/listbox-combo.html\n * Sample 2: https://www.w3.org/blog/wai-components-gallery/widget/combobox-with-aria-autocompleteinline/\n *\n * Tab logic:\n * Popup is close\n * 1. Focus input (mark component as focused)\n * 2. Press enter to show the popup\n * 3. If popup has input, focus it\n *\n * Popup is open\n * 1. press tab to close the popup\n * 2. Focus back to the selection input box\n * 3. Let the native tab going on\n *\n * TreeSelect use 2 design type.\n * In single mode, we should focus on the `span`\n * In multiple mode, we should focus on the `input`\n */\nimport React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { polyfill } from 'react-lifecycles-compat';\nimport KeyCode from \"rc-util/es/KeyCode\";\nimport shallowEqual from 'shallowequal';\nimport raf from 'raf';\nimport scrollIntoView from 'dom-scroll-into-view';\nimport SelectTrigger from './SelectTrigger';\nimport { selectorContextTypes } from './Base/BaseSelector';\nimport { popupContextTypes } from './Base/BasePopup';\nimport SingleSelector from './Selector/SingleSelector';\nimport MultipleSelector, { multipleSelectorContextTypes } from './Selector/MultipleSelector';\nimport SinglePopup from './Popup/SinglePopup';\nimport MultiplePopup from './Popup/MultiplePopup';\nimport { SHOW_ALL, SHOW_PARENT, SHOW_CHILD } from './strategies';\nimport { createRef, generateAriaId, formatInternalValue, formatSelectorValue, parseSimpleTreeData, convertDataToTree, convertTreeToEntities, conductCheck, getHalfCheckedKeys, flatToHierarchy, isPosRelated, isLabelInValue, getFilterTree, cleanEntity, findPopupContainer } from './util';\nimport { valueProp } from './propTypes';\nimport SelectNode from './SelectNode';\n\nvar Select =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Select, _React$Component);\n\n  function Select(_props) {\n    var _this;\n\n    _classCallCheck(this, Select);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Select).call(this, _props));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorFocus\", function () {\n      _this.setState({\n        focused: true\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorBlur\", function () {\n      _this.setState({\n        focused: false\n      }); // TODO: Close when Popup is also not focused\n      // this.setState({ open: false });\n\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onComponentKeyDown\", function (event) {\n      var open = _this.state.open;\n      var keyCode = event.keyCode;\n\n      if (!open) {\n        if ([KeyCode.ENTER, KeyCode.DOWN].indexOf(keyCode) !== -1) {\n          _this.setOpenState(true);\n        }\n      } else if (KeyCode.ESC === keyCode) {\n        _this.setOpenState(false);\n      } else if ([KeyCode.UP, KeyCode.DOWN, KeyCode.LEFT, KeyCode.RIGHT].indexOf(keyCode) !== -1) {\n        // TODO: Handle `open` state\n        event.stopPropagation();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDeselect\", function (wrappedValue, node, nodeEventInfo) {\n      var onDeselect = _this.props.onDeselect;\n      if (!onDeselect) return;\n      onDeselect(wrappedValue, node, nodeEventInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSelectorClear\", function (event) {\n      var disabled = _this.props.disabled;\n      if (disabled) return;\n\n      _this.triggerChange([], []);\n\n      if (!_this.isSearchValueControlled()) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      event.stopPropagation();\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onMultipleSelectorRemove\", function (event, removeValue) {\n      event.stopPropagation();\n      var _this$state = _this.state,\n          valueList = _this$state.valueList,\n          missValueList = _this$state.missValueList,\n          valueEntities = _this$state.valueEntities;\n      var _this$props = _this.props,\n          treeCheckable = _this$props.treeCheckable,\n          treeCheckStrictly = _this$props.treeCheckStrictly,\n          treeNodeLabelProp = _this$props.treeNodeLabelProp,\n          disabled = _this$props.disabled;\n      if (disabled) return; // Find trigger entity\n\n      var triggerEntity = valueEntities[removeValue]; // Clean up value\n\n      var newValueList = valueList;\n\n      if (triggerEntity) {\n        // If value is in tree\n        if (treeCheckable && !treeCheckStrictly) {\n          newValueList = valueList.filter(function (_ref) {\n            var value = _ref.value;\n            var entity = valueEntities[value];\n            return !isPosRelated(entity.pos, triggerEntity.pos);\n          });\n        } else {\n          newValueList = valueList.filter(function (_ref2) {\n            var value = _ref2.value;\n            return value !== removeValue;\n          });\n        }\n      }\n\n      var triggerNode = triggerEntity ? triggerEntity.node : null;\n      var extraInfo = {\n        triggerValue: removeValue,\n        triggerNode: triggerNode\n      };\n      var deselectInfo = {\n        node: triggerNode\n      }; // [Legacy] Little hack on this to make same action as `onCheck` event.\n\n      if (treeCheckable) {\n        var filteredEntityList = newValueList.map(function (_ref3) {\n          var value = _ref3.value;\n          return valueEntities[value];\n        });\n        deselectInfo.event = 'check';\n        deselectInfo.checked = false;\n        deselectInfo.checkedNodes = filteredEntityList.map(function (_ref4) {\n          var node = _ref4.node;\n          return node;\n        });\n        deselectInfo.checkedNodesPositions = filteredEntityList.map(function (_ref5) {\n          var node = _ref5.node,\n              pos = _ref5.pos;\n          return {\n            node: node,\n            pos: pos\n          };\n        });\n\n        if (treeCheckStrictly) {\n          extraInfo.allCheckedNodes = deselectInfo.checkedNodes;\n        } else {\n          // TODO: It's too expansive to get `halfCheckedKeys` in onDeselect. Not pass this.\n          extraInfo.allCheckedNodes = flatToHierarchy(filteredEntityList).map(function (_ref6) {\n            var node = _ref6.node;\n            return node;\n          });\n        }\n      } else {\n        deselectInfo.event = 'select';\n        deselectInfo.selected = false;\n        deselectInfo.selectedNodes = newValueList.map(function (_ref7) {\n          var value = _ref7.value;\n          return (valueEntities[value] || {}).node;\n        });\n      } // Some value user pass prop is not in the tree, we also need clean it\n\n\n      var newMissValueList = missValueList.filter(function (_ref8) {\n        var value = _ref8.value;\n        return value !== removeValue;\n      });\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          label: triggerNode ? triggerNode.props[treeNodeLabelProp] : null,\n          value: removeValue\n        };\n      } else {\n        wrappedValue = removeValue;\n      }\n\n      _this.onDeselect(wrappedValue, triggerNode, deselectInfo);\n\n      _this.triggerChange(newMissValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onValueTrigger\", function (isAdd, nodeList, nodeEventInfo, nodeExtraInfo) {\n      var node = nodeEventInfo.node;\n      var value = node.props.value;\n      var _this$state2 = _this.state,\n          missValueList = _this$state2.missValueList,\n          valueEntities = _this$state2.valueEntities,\n          keyEntities = _this$state2.keyEntities,\n          searchValue = _this$state2.searchValue;\n      var _this$props2 = _this.props,\n          disabled = _this$props2.disabled,\n          inputValue = _this$props2.inputValue,\n          treeNodeLabelProp = _this$props2.treeNodeLabelProp,\n          onSelect = _this$props2.onSelect,\n          onSearch = _this$props2.onSearch,\n          multiple = _this$props2.multiple,\n          treeCheckable = _this$props2.treeCheckable,\n          treeCheckStrictly = _this$props2.treeCheckStrictly,\n          autoClearSearchValue = _this$props2.autoClearSearchValue;\n      var label = node.props[treeNodeLabelProp];\n      if (disabled) return; // Wrap the return value for user\n\n      var wrappedValue;\n\n      if (_this.isLabelInValue()) {\n        wrappedValue = {\n          value: value,\n          label: label\n        };\n      } else {\n        wrappedValue = value;\n      } // [Legacy] Origin code not trigger `onDeselect` every time. Let's align the behaviour.\n\n\n      if (isAdd) {\n        if (onSelect) {\n          onSelect(wrappedValue, node, nodeEventInfo);\n        }\n      } else {\n        _this.onDeselect(wrappedValue, node, nodeEventInfo);\n      } // Get wrapped value list.\n      // This is a bit hack cause we use key to match the value.\n\n\n      var newValueList = nodeList.map(function (_ref9) {\n        var props = _ref9.props;\n        return {\n          value: props.value,\n          label: props[treeNodeLabelProp]\n        };\n      }); // When is `treeCheckable` and with `searchValue`, `valueList` is not full filled.\n      // We need calculate the missing nodes.\n\n      if (treeCheckable && !treeCheckStrictly) {\n        var keyList = newValueList.map(function (_ref10) {\n          var val = _ref10.value;\n          return valueEntities[val].key;\n        });\n\n        if (isAdd) {\n          keyList = conductCheck(keyList, true, keyEntities).checkedKeys;\n        } else {\n          keyList = conductCheck([valueEntities[value].key], false, keyEntities, {\n            checkedKeys: keyList\n          }).checkedKeys;\n        }\n\n        newValueList = keyList.map(function (key) {\n          var props = keyEntities[key].node.props;\n          return {\n            value: props.value,\n            label: props[treeNodeLabelProp]\n          };\n        });\n      } // Clean up `searchValue` when this prop is set\n\n\n      if (autoClearSearchValue || inputValue === null) {\n        // Clean state `searchValue` if uncontrolled\n        if (!_this.isSearchValueControlled() && (multiple || treeCheckable)) {\n          _this.setUncontrolledState({\n            searchValue: '',\n            filteredTreeNodes: null\n          });\n        } // Trigger onSearch if `searchValue` to be empty.\n        // We should also trigger onSearch with empty string here\n        // since if user use `treeExpandedKeys`, it need user have the ability to reset it.\n\n\n        if (onSearch && searchValue && searchValue.length) {\n          onSearch('');\n        }\n      } // [Legacy] Provide extra info\n\n\n      var extraInfo = _objectSpread({}, nodeExtraInfo, {\n        triggerValue: value,\n        triggerNode: node\n      });\n\n      _this.triggerChange(missValueList, newValueList, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeSelect\", function (_, nodeEventInfo) {\n      var _this$state3 = _this.state,\n          valueList = _this$state3.valueList,\n          valueEntities = _this$state3.valueEntities;\n      var _this$props3 = _this.props,\n          treeCheckable = _this$props3.treeCheckable,\n          multiple = _this$props3.multiple;\n      if (treeCheckable) return;\n\n      if (!multiple) {\n        _this.setOpenState(false);\n      }\n\n      var isAdd = nodeEventInfo.selected;\n      var selectedValue = nodeEventInfo.node.props.value;\n      var newValueList;\n\n      if (!multiple) {\n        newValueList = [{\n          value: selectedValue\n        }];\n      } else {\n        newValueList = valueList.filter(function (_ref11) {\n          var value = _ref11.value;\n          return value !== selectedValue;\n        });\n\n        if (isAdd) {\n          newValueList.push({\n            value: selectedValue\n          });\n        }\n      }\n\n      var selectedNodes = newValueList.map(function (_ref12) {\n        var value = _ref12.value;\n        return valueEntities[value];\n      }).filter(function (entity) {\n        return entity;\n      }).map(function (_ref13) {\n        var node = _ref13.node;\n        return node;\n      });\n\n      _this.onValueTrigger(isAdd, selectedNodes, nodeEventInfo, {\n        selected: isAdd\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onTreeNodeCheck\", function (_, nodeEventInfo) {\n      var _this$state4 = _this.state,\n          searchValue = _this$state4.searchValue,\n          keyEntities = _this$state4.keyEntities,\n          valueEntities = _this$state4.valueEntities,\n          valueList = _this$state4.valueList;\n      var treeCheckStrictly = _this.props.treeCheckStrictly;\n      var checkedNodes = nodeEventInfo.checkedNodes,\n          checkedNodesPositions = nodeEventInfo.checkedNodesPositions;\n      var isAdd = nodeEventInfo.checked;\n      var extraInfo = {\n        checked: isAdd\n      };\n      var checkedNodeList = checkedNodes; // [Legacy] Check event provide `allCheckedNodes`.\n      // When `treeCheckStrictly` or internal `searchValue` is set, TreeNode will be unrelated:\n      // - Related: Show the top checked nodes and has children prop.\n      // - Unrelated: Show all the checked nodes.\n\n      if (searchValue) {\n        var oriKeyList = valueList.map(function (_ref14) {\n          var value = _ref14.value;\n          return valueEntities[value];\n        }).filter(function (entity) {\n          return entity;\n        }).map(function (_ref15) {\n          var key = _ref15.key;\n          return key;\n        });\n        var keyList;\n\n        if (isAdd) {\n          keyList = Array.from(new Set([].concat(_toConsumableArray(oriKeyList), _toConsumableArray(checkedNodeList.map(function (_ref16) {\n            var value = _ref16.props.value;\n            return valueEntities[value].key;\n          })))));\n        } else {\n          keyList = conductCheck([nodeEventInfo.node.props.eventKey], false, keyEntities, {\n            checkedKeys: oriKeyList\n          }).checkedKeys;\n        }\n\n        checkedNodeList = keyList.map(function (key) {\n          return keyEntities[key].node;\n        }); // Let's follow as not `treeCheckStrictly` format\n\n        extraInfo.allCheckedNodes = keyList.map(function (key) {\n          return cleanEntity(keyEntities[key]);\n        });\n      } else if (treeCheckStrictly) {\n        extraInfo.allCheckedNodes = nodeEventInfo.checkedNodes;\n      } else {\n        extraInfo.allCheckedNodes = flatToHierarchy(checkedNodesPositions);\n      }\n\n      _this.onValueTrigger(isAdd, checkedNodeList, nodeEventInfo, extraInfo);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDropdownVisibleChange\", function (open) {\n      var _this$props4 = _this.props,\n          multiple = _this$props4.multiple,\n          treeCheckable = _this$props4.treeCheckable;\n      var searchValue = _this.state.searchValue; // When set open success and single mode,\n      // we will reset the input content.\n\n      if (open && !multiple && !treeCheckable && searchValue) {\n        _this.setUncontrolledState({\n          searchValue: '',\n          filteredTreeNodes: null\n        });\n      }\n\n      _this.setOpenState(open, true);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputChange\", function (_ref17) {\n      var value = _ref17.target.value;\n      var _this$state5 = _this.state,\n          treeNodes = _this$state5.treeNodes,\n          valueEntities = _this$state5.valueEntities;\n      var _this$props5 = _this.props,\n          onSearch = _this$props5.onSearch,\n          filterTreeNode = _this$props5.filterTreeNode,\n          treeNodeFilterProp = _this$props5.treeNodeFilterProp;\n\n      if (onSearch) {\n        onSearch(value);\n      }\n\n      var isSet = false;\n\n      if (!_this.isSearchValueControlled()) {\n        isSet = _this.setUncontrolledState({\n          searchValue: value\n        });\n\n        _this.setOpenState(true);\n      }\n\n      if (isSet) {\n        // Do the search logic\n        var upperSearchValue = String(value).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        _this.setState({\n          filteredTreeNodes: getFilterTree(treeNodes, value, filterTreeNodeFn, valueEntities, SelectNode)\n        });\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onSearchInputKeyDown\", function (event) {\n      var _this$state6 = _this.state,\n          searchValue = _this$state6.searchValue,\n          valueList = _this$state6.valueList;\n      var keyCode = event.keyCode;\n\n      if (KeyCode.BACKSPACE === keyCode && _this.isMultiple() && !searchValue && valueList.length) {\n        var lastValue = valueList[valueList.length - 1].value;\n\n        _this.onMultipleSelectorRemove(event, lastValue);\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onChoiceAnimationLeave\", function () {\n      raf(function () {\n        _this.forcePopupAlign();\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setPopupRef\", function (popup) {\n      _this.popup = popup;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setUncontrolledState\", function (state) {\n      var needSync = false;\n      var newState = {};\n      Object.keys(state).forEach(function (name) {\n        if (name in _this.props) return;\n        needSync = true;\n        newState[name] = state[name];\n      });\n\n      if (needSync) {\n        _this.setState(newState);\n      }\n\n      return needSync;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"setOpenState\", function (open) {\n      var byTrigger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var onDropdownVisibleChange = _this.props.onDropdownVisibleChange;\n\n      if (onDropdownVisibleChange && onDropdownVisibleChange(open, {\n        documentClickClose: !open && byTrigger\n      }) === false) {\n        return;\n      }\n\n      _this.setUncontrolledState({\n        open: open\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isMultiple\", function () {\n      var _this$props6 = _this.props,\n          multiple = _this$props6.multiple,\n          treeCheckable = _this$props6.treeCheckable;\n      return !!(multiple || treeCheckable);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isLabelInValue\", function () {\n      return isLabelInValue(_this.props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"isSearchValueControlled\", function () {\n      var inputValue = _this.props.inputValue;\n      if ('searchValue' in _this.props) return true;\n      return 'inputValue' in _this.props && inputValue !== null;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"forcePopupAlign\", function () {\n      var $trigger = _this.selectTriggerRef.current;\n\n      if ($trigger) {\n        $trigger.forcePopupAlign();\n      }\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"delayForcePopupAlign\", function () {\n      // Wait 2 frame to avoid dom update & dom algin in the same time\n      // https://github.com/ant-design/ant-design/issues/12031\n      raf(function () {\n        raf(_this.forcePopupAlign);\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"triggerChange\", function (missValueList, valueList) {\n      var extraInfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var _this$state7 = _this.state,\n          valueEntities = _this$state7.valueEntities,\n          searchValue = _this$state7.searchValue,\n          prevSelectorValueList = _this$state7.selectorValueList;\n      var _this$props7 = _this.props,\n          onChange = _this$props7.onChange,\n          disabled = _this$props7.disabled,\n          treeCheckable = _this$props7.treeCheckable,\n          treeCheckStrictly = _this$props7.treeCheckStrictly;\n      if (disabled) return; // Trigger\n\n      var extra = _objectSpread({\n        // [Legacy] Always return as array contains label & value\n        preValue: prevSelectorValueList.map(function (_ref18) {\n          var label = _ref18.label,\n              value = _ref18.value;\n          return {\n            label: label,\n            value: value\n          };\n        })\n      }, extraInfo); // Format value by `treeCheckStrictly`\n\n\n      var selectorValueList = formatSelectorValue(valueList, _this.props, valueEntities);\n\n      if (!('value' in _this.props)) {\n        var newState = {\n          missValueList: missValueList,\n          valueList: valueList,\n          selectorValueList: selectorValueList\n        };\n\n        if (searchValue && treeCheckable && !treeCheckStrictly) {\n          newState.searchHalfCheckedKeys = getHalfCheckedKeys(valueList, valueEntities);\n        }\n\n        _this.setState(newState);\n      } // Only do the logic when `onChange` function provided\n\n\n      if (onChange) {\n        var connectValueList; // Get value by mode\n\n        if (_this.isMultiple()) {\n          connectValueList = [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList));\n        } else {\n          connectValueList = selectorValueList.slice(0, 1);\n        }\n\n        var labelList = null;\n        var returnValue;\n\n        if (_this.isLabelInValue()) {\n          returnValue = connectValueList.map(function (_ref19) {\n            var label = _ref19.label,\n                value = _ref19.value;\n            return {\n              label: label,\n              value: value\n            };\n          });\n        } else {\n          labelList = [];\n          returnValue = connectValueList.map(function (_ref20) {\n            var label = _ref20.label,\n                value = _ref20.value;\n            labelList.push(label);\n            return value;\n          });\n        }\n\n        if (!_this.isMultiple()) {\n          returnValue = returnValue[0];\n        }\n\n        onChange(returnValue, labelList, extra);\n      }\n    });\n\n    var prefixAria = _props.prefixAria,\n        defaultOpen = _props.defaultOpen,\n        _open = _props.open;\n    _this.state = {\n      open: _open || defaultOpen,\n      valueList: [],\n      searchHalfCheckedKeys: [],\n      missValueList: [],\n      // Contains the value not in the tree\n      selectorValueList: [],\n      // Used for multiple selector\n      valueEntities: {},\n      keyEntities: {},\n      searchValue: '',\n      init: true\n    };\n    _this.selectorRef = createRef();\n    _this.selectTriggerRef = createRef(); // ARIA need `aria-controls` props mapping\n    // Since this need user input. Let's generate ourselves\n\n    _this.ariaId = generateAriaId(\"\".concat(prefixAria, \"-list\"));\n    return _this;\n  }\n\n  _createClass(Select, [{\n    key: \"getChildContext\",\n    value: function getChildContext() {\n      return {\n        rcTreeSelect: {\n          onSelectorFocus: this.onSelectorFocus,\n          onSelectorBlur: this.onSelectorBlur,\n          onSelectorKeyDown: this.onComponentKeyDown,\n          onSelectorClear: this.onSelectorClear,\n          onMultipleSelectorRemove: this.onMultipleSelectorRemove,\n          onTreeNodeSelect: this.onTreeNodeSelect,\n          onTreeNodeCheck: this.onTreeNodeCheck,\n          onPopupKeyDown: this.onComponentKeyDown,\n          onSearchInputChange: this.onSearchInputChange,\n          onSearchInputKeyDown: this.onSearchInputKeyDown\n        }\n      };\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props8 = this.props,\n          autoFocus = _this$props8.autoFocus,\n          disabled = _this$props8.disabled;\n\n      if (autoFocus && !disabled) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(_, prevState) {\n      var _this2 = this;\n\n      var prefixCls = this.props.prefixCls;\n      var _this$state8 = this.state,\n          valueList = _this$state8.valueList,\n          open = _this$state8.open,\n          selectorValueList = _this$state8.selectorValueList,\n          valueEntities = _this$state8.valueEntities;\n      var isMultiple = this.isMultiple();\n\n      if (prevState.valueList !== valueList) {\n        this.forcePopupAlign();\n      } // Scroll to value position, only need sync on single mode\n\n\n      if (!isMultiple && selectorValueList.length && !prevState.open && open && this.popup) {\n        var value = selectorValueList[0].value;\n\n        var _this$popup$getTree = this.popup.getTree(),\n            domTreeNodes = _this$popup$getTree.domTreeNodes;\n\n        var _ref21 = valueEntities[value] || {},\n            key = _ref21.key;\n\n        var treeNode = domTreeNodes[key];\n\n        if (treeNode) {\n          var domNode = findDOMNode(treeNode);\n          raf(function () {\n            var popupNode = findDOMNode(_this2.popup);\n            var triggerContainer = findPopupContainer(popupNode, \"\".concat(prefixCls, \"-dropdown\"));\n            var searchNode = _this2.popup.searchRef.current;\n\n            if (domNode && triggerContainer && searchNode) {\n              scrollIntoView(domNode, triggerContainer, {\n                onlyScrollIfNeeded: true,\n                offsetTop: searchNode.offsetHeight\n              });\n            }\n          });\n        }\n      }\n    } // ==================== Selector ====================\n\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      this.selectorRef.current.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      this.selectorRef.current.blur();\n    } // ===================== Render =====================\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state9 = this.state,\n          valueList = _this$state9.valueList,\n          missValueList = _this$state9.missValueList,\n          selectorValueList = _this$state9.selectorValueList,\n          searchHalfCheckedKeys = _this$state9.searchHalfCheckedKeys,\n          valueEntities = _this$state9.valueEntities,\n          keyEntities = _this$state9.keyEntities,\n          searchValue = _this$state9.searchValue,\n          open = _this$state9.open,\n          focused = _this$state9.focused,\n          treeNodes = _this$state9.treeNodes,\n          filteredTreeNodes = _this$state9.filteredTreeNodes;\n      var _this$props9 = this.props,\n          prefixCls = _this$props9.prefixCls,\n          treeExpandedKeys = _this$props9.treeExpandedKeys,\n          onTreeExpand = _this$props9.onTreeExpand;\n      var isMultiple = this.isMultiple();\n\n      var passProps = _objectSpread({}, this.props, {\n        isMultiple: isMultiple,\n        valueList: valueList,\n        searchHalfCheckedKeys: searchHalfCheckedKeys,\n        selectorValueList: [].concat(_toConsumableArray(missValueList), _toConsumableArray(selectorValueList)),\n        valueEntities: valueEntities,\n        keyEntities: keyEntities,\n        searchValue: searchValue,\n        upperSearchValue: (searchValue || '').toUpperCase(),\n        // Perf save\n        open: open,\n        focused: focused,\n        onChoiceAnimationLeave: this.onChoiceAnimationLeave,\n        dropdownPrefixCls: \"\".concat(prefixCls, \"-dropdown\"),\n        ariaId: this.ariaId\n      });\n\n      var Popup = isMultiple ? MultiplePopup : SinglePopup;\n      var $popup = React.createElement(Popup, _extends({\n        ref: this.setPopupRef\n      }, passProps, {\n        onTreeExpanded: this.delayForcePopupAlign,\n        treeNodes: treeNodes,\n        filteredTreeNodes: filteredTreeNodes // Tree expanded control\n        ,\n        treeExpandedKeys: treeExpandedKeys,\n        onTreeExpand: onTreeExpand\n      }));\n      var Selector = isMultiple ? MultipleSelector : SingleSelector;\n      var $selector = React.createElement(Selector, _extends({}, passProps, {\n        ref: this.selectorRef\n      }));\n      return React.createElement(SelectTrigger, _extends({}, passProps, {\n        ref: this.selectTriggerRef,\n        popupElement: $popup,\n        onKeyDown: this.onKeyDown,\n        onDropdownVisibleChange: this.onDropdownVisibleChange\n      }), $selector);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var _prevState$prevProps = prevState.prevProps,\n          prevProps = _prevState$prevProps === void 0 ? {} : _prevState$prevProps;\n      var treeCheckable = nextProps.treeCheckable,\n          treeCheckStrictly = nextProps.treeCheckStrictly,\n          filterTreeNode = nextProps.filterTreeNode,\n          treeNodeFilterProp = nextProps.treeNodeFilterProp,\n          treeDataSimpleMode = nextProps.treeDataSimpleMode;\n      var newState = {\n        prevProps: nextProps,\n        init: false\n      }; // Process the state when props updated\n\n      function processState(propName, updater) {\n        if (prevProps[propName] !== nextProps[propName]) {\n          updater(nextProps[propName], prevProps[propName]);\n          return true;\n        }\n\n        return false;\n      }\n\n      var valueRefresh = false; // Open\n\n      processState('open', function (propValue) {\n        newState.open = propValue;\n      }); // Tree Nodes\n\n      var treeNodes;\n      var treeDataChanged = false;\n      var treeDataModeChanged = false;\n      processState('treeData', function (propValue) {\n        treeNodes = convertDataToTree(propValue);\n        treeDataChanged = true;\n      });\n      processState('treeDataSimpleMode', function (propValue, prevValue) {\n        if (!propValue) return;\n        var prev = !prevValue || prevValue === true ? {} : prevValue; // Shallow equal to avoid dynamic prop object\n\n        if (!shallowEqual(propValue, prev)) {\n          treeDataModeChanged = true;\n        }\n      }); // Parse by `treeDataSimpleMode`\n\n      if (treeDataSimpleMode && (treeDataChanged || treeDataModeChanged)) {\n        var simpleMapper = _objectSpread({\n          id: 'id',\n          pId: 'pId',\n          rootPId: null\n        }, treeDataSimpleMode !== true ? treeDataSimpleMode : {});\n\n        treeNodes = convertDataToTree(parseSimpleTreeData(nextProps.treeData, simpleMapper));\n      } // If `treeData` not provide, use children TreeNodes\n\n\n      if (!nextProps.treeData) {\n        processState('children', function (propValue) {\n          treeNodes = Array.isArray(propValue) ? propValue : [propValue];\n        });\n      } // Convert `treeData` to entities\n\n\n      if (treeNodes) {\n        var entitiesMap = convertTreeToEntities(treeNodes);\n        newState.treeNodes = treeNodes;\n        newState.posEntities = entitiesMap.posEntities;\n        newState.valueEntities = entitiesMap.valueEntities;\n        newState.keyEntities = entitiesMap.keyEntities;\n        valueRefresh = true;\n      } // Value List\n\n\n      if (prevState.init) {\n        processState('defaultValue', function (propValue) {\n          newState.valueList = formatInternalValue(propValue, nextProps);\n          valueRefresh = true;\n        });\n      }\n\n      processState('value', function (propValue) {\n        newState.valueList = formatInternalValue(propValue, nextProps);\n        valueRefresh = true;\n      }); // Selector Value List\n\n      if (valueRefresh) {\n        // Find out that value not exist in the tree\n        var missValueList = [];\n        var filteredValueList = [];\n        var keyList = []; // Get latest value list\n\n        var latestValueList = newState.valueList;\n\n        if (!latestValueList) {\n          // Also need add prev missValueList to avoid new treeNodes contains the value\n          latestValueList = [].concat(_toConsumableArray(prevState.valueList), _toConsumableArray(prevState.missValueList));\n        } // Get key by value\n\n\n        var valueLabels = {};\n        latestValueList.forEach(function (wrapperValue) {\n          var value = wrapperValue.value,\n              label = wrapperValue.label;\n          var entity = (newState.valueEntities || prevState.valueEntities)[value];\n          valueLabels[value] = label;\n\n          if (entity) {\n            keyList.push(entity.key);\n            filteredValueList.push(wrapperValue);\n            return;\n          } // If not match, it may caused by ajax load. We need keep this\n\n\n          missValueList.push(wrapperValue);\n        }); // We need calculate the value when tree is checked tree\n\n        if (treeCheckable && !treeCheckStrictly) {\n          // Calculate the keys need to be checked\n          var _conductCheck = conductCheck(keyList, true, newState.keyEntities || prevState.keyEntities),\n              checkedKeys = _conductCheck.checkedKeys; // Format value list again for internal usage\n\n\n          newState.valueList = checkedKeys.map(function (key) {\n            var val = (newState.keyEntities || prevState.keyEntities)[key].value;\n            var wrappedValue = {\n              value: val\n            };\n\n            if (valueLabels[val] !== undefined) {\n              wrappedValue.label = valueLabels[val];\n            }\n\n            return wrappedValue;\n          });\n        } else {\n          newState.valueList = filteredValueList;\n        } // Fill the missValueList, we still need display in the selector\n\n\n        newState.missValueList = missValueList; // Calculate the value list for `Selector` usage\n\n        newState.selectorValueList = formatSelectorValue(newState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      } // [Legacy] To align with `Select` component,\n      // We use `searchValue` instead of `inputValue` but still keep the api\n      // `inputValue` support `null` to work as `autoClearSearchValue`\n\n\n      processState('inputValue', function (propValue) {\n        if (propValue !== null) {\n          newState.searchValue = propValue;\n        }\n      }); // Search value\n\n      processState('searchValue', function (propValue) {\n        newState.searchValue = propValue;\n      }); // Do the search logic\n\n      if (newState.searchValue !== undefined || prevState.searchValue && treeNodes) {\n        var searchValue = newState.searchValue !== undefined ? newState.searchValue : prevState.searchValue;\n        var upperSearchValue = String(searchValue).toUpperCase();\n        var filterTreeNodeFn = filterTreeNode;\n\n        if (filterTreeNode === false) {\n          // Don't filter if is false\n          filterTreeNodeFn = function filterTreeNodeFn() {\n            return true;\n          };\n        } else if (typeof filterTreeNodeFn !== 'function') {\n          // When is not function (true or undefined), use inner filter\n          filterTreeNodeFn = function filterTreeNodeFn(_, node) {\n            var nodeValue = String(node.props[treeNodeFilterProp]).toUpperCase();\n            return nodeValue.indexOf(upperSearchValue) !== -1;\n          };\n        }\n\n        newState.filteredTreeNodes = getFilterTree(newState.treeNodes || prevState.treeNodes, searchValue, filterTreeNodeFn, newState.valueEntities || prevState.valueEntities, SelectNode);\n      } // We should re-calculate the halfCheckedKeys when in search mode\n\n\n      if (valueRefresh && treeCheckable && !treeCheckStrictly && (newState.searchValue || prevState.searchValue)) {\n        newState.searchHalfCheckedKeys = getHalfCheckedKeys(newState.valueList, newState.valueEntities || prevState.valueEntities);\n      } // Checked Strategy\n\n\n      processState('showCheckedStrategy', function () {\n        newState.selectorValueList = newState.selectorValueList || formatSelectorValue(newState.valueList || prevState.valueList, nextProps, newState.valueEntities || prevState.valueEntities);\n      });\n      return newState;\n    }\n  }]);\n\n  return Select;\n}(React.Component);\n\n_defineProperty(Select, \"propTypes\", {\n  prefixCls: PropTypes.string,\n  prefixAria: PropTypes.string,\n  multiple: PropTypes.bool,\n  showArrow: PropTypes.bool,\n  open: PropTypes.bool,\n  value: valueProp,\n  autoFocus: PropTypes.bool,\n  defaultOpen: PropTypes.bool,\n  defaultValue: valueProp,\n  showSearch: PropTypes.bool,\n  placeholder: PropTypes.node,\n  inputValue: PropTypes.string,\n  // [Legacy] Deprecated. Use `searchValue` instead.\n  searchValue: PropTypes.string,\n  autoClearSearchValue: PropTypes.bool,\n  searchPlaceholder: PropTypes.node,\n  // [Legacy] Confuse with placeholder\n  disabled: PropTypes.bool,\n  children: PropTypes.node,\n  labelInValue: PropTypes.bool,\n  maxTagCount: PropTypes.number,\n  maxTagPlaceholder: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  maxTagTextLength: PropTypes.number,\n  showCheckedStrategy: PropTypes.oneOf([SHOW_ALL, SHOW_PARENT, SHOW_CHILD]),\n  dropdownMatchSelectWidth: PropTypes.bool,\n  treeData: PropTypes.array,\n  treeDataSimpleMode: PropTypes.oneOfType([PropTypes.bool, PropTypes.object]),\n  treeNodeFilterProp: PropTypes.string,\n  treeNodeLabelProp: PropTypes.string,\n  treeCheckable: PropTypes.oneOfType([PropTypes.bool, PropTypes.node]),\n  treeCheckStrictly: PropTypes.bool,\n  treeIcon: PropTypes.bool,\n  treeLine: PropTypes.bool,\n  treeDefaultExpandAll: PropTypes.bool,\n  treeDefaultExpandedKeys: PropTypes.array,\n  treeExpandedKeys: PropTypes.array,\n  loadData: PropTypes.func,\n  filterTreeNode: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  notFoundContent: PropTypes.node,\n  onSearch: PropTypes.func,\n  onSelect: PropTypes.func,\n  onDeselect: PropTypes.func,\n  onChange: PropTypes.func,\n  onDropdownVisibleChange: PropTypes.func,\n  onTreeExpand: PropTypes.func,\n  inputIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  clearIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  removeIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n  switcherIcon: PropTypes.oneOfType([PropTypes.node, PropTypes.func])\n});\n\n_defineProperty(Select, \"childContextTypes\", {\n  rcTreeSelect: PropTypes.shape(_objectSpread({}, selectorContextTypes, {}, multipleSelectorContextTypes, {}, popupContextTypes, {\n    onSearchInputChange: PropTypes.func,\n    onSearchInputKeyDown: PropTypes.func\n  }))\n});\n\n_defineProperty(Select, \"defaultProps\", {\n  prefixCls: 'rc-tree-select',\n  prefixAria: 'rc-tree-select',\n  showArrow: true,\n  showSearch: true,\n  autoClearSearchValue: true,\n  showCheckedStrategy: SHOW_CHILD,\n  // dropdownMatchSelectWidth change the origin design, set to false now\n  // ref: https://github.com/react-component/select/blob/4cad95e098a341a09de239ad6981067188842020/src/Select.jsx#L344\n  // ref: https://github.com/react-component/select/pull/71\n  treeNodeFilterProp: 'value',\n  treeNodeLabelProp: 'title',\n  treeIcon: false,\n  notFoundContent: 'Not Found'\n});\n\nSelect.TreeNode = SelectNode;\nSelect.SHOW_ALL = SHOW_ALL;\nSelect.SHOW_PARENT = SHOW_PARENT;\nSelect.SHOW_CHILD = SHOW_CHILD; // Let warning show correct component name\n\nSelect.displayName = 'TreeSelect';\npolyfill(Select);\nexport default Select;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}