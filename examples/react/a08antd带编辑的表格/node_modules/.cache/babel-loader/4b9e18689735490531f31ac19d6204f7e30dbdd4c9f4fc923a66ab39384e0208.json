{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\nvar generateRandomKey = require('./generateRandomKey');\nvar moveBlockInContentState = require('./moveBlockInContentState');\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\nvar List = Immutable.List,\n  Repeat = Immutable.Repeat;\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n    var charData = CharacterMetadata.create({\n      entity: entityKey\n    });\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _extends({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _extends({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n    var withMovedAtomicBlock = void 0;\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\nmodule.exports = AtomicBlockUtils;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","BlockMapBuilder","CharacterMetadata","ContentBlock","ContentBlockNode","DraftFeatureFlags","DraftModifier","EditorState","Immutable","SelectionState","generateRandomKey","moveBlockInContentState","experimentalTreeDataSupport","draft_tree_data_support","ContentBlockRecord","List","Repeat","AtomicBlockUtils","insertAtomicBlock","editorState","entityKey","character","contentState","getCurrentContent","selectionState","getSelection","afterRemoval","removeRange","targetSelection","getSelectionAfter","afterSplit","splitBlock","insertionTarget","asAtomicBlock","setBlockType","charData","create","entity","atomicBlockConfig","type","text","characterList","atomicDividerBlockConfig","nextSibling","prevSibling","fragmentArray","fragment","createFromArray","withAtomicBlock","replaceWithFragment","newContent","merge","selectionBefore","selectionAfter","set","push","moveAtomicBlock","atomicBlock","targetRange","insertionMode","withMovedAtomicBlock","targetBlock","getBlockForKey","getStartKey","getEndKey","selectionAfterRemoval","_targetBlock","getFocusKey","getStartOffset","getEndOffset","getLength","selectionAfterSplit","_targetBlock2","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/AtomicBlockUtils.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule AtomicBlockUtils\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar BlockMapBuilder = require('./BlockMapBuilder');\nvar CharacterMetadata = require('./CharacterMetadata');\nvar ContentBlock = require('./ContentBlock');\nvar ContentBlockNode = require('./ContentBlockNode');\nvar DraftFeatureFlags = require('./DraftFeatureFlags');\nvar DraftModifier = require('./DraftModifier');\nvar EditorState = require('./EditorState');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar generateRandomKey = require('./generateRandomKey');\nvar moveBlockInContentState = require('./moveBlockInContentState');\n\nvar experimentalTreeDataSupport = DraftFeatureFlags.draft_tree_data_support;\nvar ContentBlockRecord = experimentalTreeDataSupport ? ContentBlockNode : ContentBlock;\n\nvar List = Immutable.List,\n    Repeat = Immutable.Repeat;\n\n\nvar AtomicBlockUtils = {\n  insertAtomicBlock: function insertAtomicBlock(editorState, entityKey, character) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var afterRemoval = DraftModifier.removeRange(contentState, selectionState, 'backward');\n\n    var targetSelection = afterRemoval.getSelectionAfter();\n    var afterSplit = DraftModifier.splitBlock(afterRemoval, targetSelection);\n    var insertionTarget = afterSplit.getSelectionAfter();\n\n    var asAtomicBlock = DraftModifier.setBlockType(afterSplit, insertionTarget, 'atomic');\n\n    var charData = CharacterMetadata.create({ entity: entityKey });\n\n    var atomicBlockConfig = {\n      key: generateRandomKey(),\n      type: 'atomic',\n      text: character,\n      characterList: List(Repeat(charData, character.length))\n    };\n\n    var atomicDividerBlockConfig = {\n      key: generateRandomKey(),\n      type: 'unstyled'\n    };\n\n    if (experimentalTreeDataSupport) {\n      atomicBlockConfig = _extends({}, atomicBlockConfig, {\n        nextSibling: atomicDividerBlockConfig.key\n      });\n      atomicDividerBlockConfig = _extends({}, atomicDividerBlockConfig, {\n        prevSibling: atomicBlockConfig.key\n      });\n    }\n\n    var fragmentArray = [new ContentBlockRecord(atomicBlockConfig), new ContentBlockRecord(atomicDividerBlockConfig)];\n\n    var fragment = BlockMapBuilder.createFromArray(fragmentArray);\n\n    var withAtomicBlock = DraftModifier.replaceWithFragment(asAtomicBlock, insertionTarget, fragment);\n\n    var newContent = withAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'insert-fragment');\n  },\n\n  moveAtomicBlock: function moveAtomicBlock(editorState, atomicBlock, targetRange, insertionMode) {\n    var contentState = editorState.getCurrentContent();\n    var selectionState = editorState.getSelection();\n\n    var withMovedAtomicBlock = void 0;\n\n    if (insertionMode === 'before' || insertionMode === 'after') {\n      var targetBlock = contentState.getBlockForKey(insertionMode === 'before' ? targetRange.getStartKey() : targetRange.getEndKey());\n\n      withMovedAtomicBlock = moveBlockInContentState(contentState, atomicBlock, targetBlock, insertionMode);\n    } else {\n      var afterRemoval = DraftModifier.removeRange(contentState, targetRange, 'backward');\n\n      var selectionAfterRemoval = afterRemoval.getSelectionAfter();\n      var _targetBlock = afterRemoval.getBlockForKey(selectionAfterRemoval.getFocusKey());\n\n      if (selectionAfterRemoval.getStartOffset() === 0) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'before');\n      } else if (selectionAfterRemoval.getEndOffset() === _targetBlock.getLength()) {\n        withMovedAtomicBlock = moveBlockInContentState(afterRemoval, atomicBlock, _targetBlock, 'after');\n      } else {\n        var afterSplit = DraftModifier.splitBlock(afterRemoval, selectionAfterRemoval);\n\n        var selectionAfterSplit = afterSplit.getSelectionAfter();\n        var _targetBlock2 = afterSplit.getBlockForKey(selectionAfterSplit.getFocusKey());\n\n        withMovedAtomicBlock = moveBlockInContentState(afterSplit, atomicBlock, _targetBlock2, 'before');\n      }\n    }\n\n    var newContent = withMovedAtomicBlock.merge({\n      selectionBefore: selectionState,\n      selectionAfter: withMovedAtomicBlock.getSelectionAfter().set('hasFocus', true)\n    });\n\n    return EditorState.push(editorState, newContent, 'move-block');\n  }\n};\n\nmodule.exports = AtomicBlockUtils;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}