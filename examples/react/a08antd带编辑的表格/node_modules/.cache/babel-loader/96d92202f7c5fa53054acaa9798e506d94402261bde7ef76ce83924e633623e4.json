{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\nvar Repeat = Immutable.Repeat;\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n  var len = text.length;\n  if (!len) {\n    return contentState;\n  }\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n  var newOffset = offset + len;\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\nmodule.exports = insertTextIntoContentState;","map":{"version":3,"names":["Immutable","require","insertIntoList","invariant","Repeat","insertTextIntoContentState","contentState","selectionState","text","characterMetadata","isCollapsed","process","env","NODE_ENV","len","length","blockMap","getBlockMap","key","getStartKey","offset","getStartOffset","block","get","blockText","getText","newBlock","merge","slice","getLength","characterList","getCharacterList","toList","newOffset","set","selectionAfter","anchorOffset","focusOffset","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-core/node_modules/draft-js/lib/insertTextIntoContentState.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule insertTextIntoContentState\n * @format\n * \n */\n\n'use strict';\n\nvar Immutable = require('immutable');\n\nvar insertIntoList = require('./insertIntoList');\nvar invariant = require('fbjs/lib/invariant');\n\nvar Repeat = Immutable.Repeat;\n\n\nfunction insertTextIntoContentState(contentState, selectionState, text, characterMetadata) {\n  !selectionState.isCollapsed() ? process.env.NODE_ENV !== 'production' ? invariant(false, '`insertText` should only be called with a collapsed range.') : invariant(false) : void 0;\n\n  var len = text.length;\n  if (!len) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var key = selectionState.getStartKey();\n  var offset = selectionState.getStartOffset();\n  var block = blockMap.get(key);\n  var blockText = block.getText();\n\n  var newBlock = block.merge({\n    text: blockText.slice(0, offset) + text + blockText.slice(offset, block.getLength()),\n    characterList: insertIntoList(block.getCharacterList(), Repeat(characterMetadata, len).toList(), offset)\n  });\n\n  var newOffset = offset + len;\n\n  return contentState.merge({\n    blockMap: blockMap.set(key, newBlock),\n    selectionAfter: selectionState.merge({\n      anchorOffset: newOffset,\n      focusOffset: newOffset\n    })\n  });\n}\n\nmodule.exports = insertTextIntoContentState;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AAEpC,IAAIC,cAAc,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAChD,IAAIE,SAAS,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AAE7C,IAAIG,MAAM,GAAGJ,SAAS,CAACI,MAAM;AAG7B,SAASC,0BAA0BA,CAACC,YAAY,EAAEC,cAAc,EAAEC,IAAI,EAAEC,iBAAiB,EAAE;EACzF,CAACF,cAAc,CAACG,WAAW,CAAC,CAAC,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GAAGV,SAAS,CAAC,KAAK,EAAE,4DAA4D,CAAC,GAAGA,SAAS,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC;EAElL,IAAIW,GAAG,GAAGN,IAAI,CAACO,MAAM;EACrB,IAAI,CAACD,GAAG,EAAE;IACR,OAAOR,YAAY;EACrB;EAEA,IAAIU,QAAQ,GAAGV,YAAY,CAACW,WAAW,CAAC,CAAC;EACzC,IAAIC,GAAG,GAAGX,cAAc,CAACY,WAAW,CAAC,CAAC;EACtC,IAAIC,MAAM,GAAGb,cAAc,CAACc,cAAc,CAAC,CAAC;EAC5C,IAAIC,KAAK,GAAGN,QAAQ,CAACO,GAAG,CAACL,GAAG,CAAC;EAC7B,IAAIM,SAAS,GAAGF,KAAK,CAACG,OAAO,CAAC,CAAC;EAE/B,IAAIC,QAAQ,GAAGJ,KAAK,CAACK,KAAK,CAAC;IACzBnB,IAAI,EAAEgB,SAAS,CAACI,KAAK,CAAC,CAAC,EAAER,MAAM,CAAC,GAAGZ,IAAI,GAAGgB,SAAS,CAACI,KAAK,CAACR,MAAM,EAAEE,KAAK,CAACO,SAAS,CAAC,CAAC,CAAC;IACpFC,aAAa,EAAE5B,cAAc,CAACoB,KAAK,CAACS,gBAAgB,CAAC,CAAC,EAAE3B,MAAM,CAACK,iBAAiB,EAAEK,GAAG,CAAC,CAACkB,MAAM,CAAC,CAAC,EAAEZ,MAAM;EACzG,CAAC,CAAC;EAEF,IAAIa,SAAS,GAAGb,MAAM,GAAGN,GAAG;EAE5B,OAAOR,YAAY,CAACqB,KAAK,CAAC;IACxBX,QAAQ,EAAEA,QAAQ,CAACkB,GAAG,CAAChB,GAAG,EAAEQ,QAAQ,CAAC;IACrCS,cAAc,EAAE5B,cAAc,CAACoB,KAAK,CAAC;MACnCS,YAAY,EAAEH,SAAS;MACvBI,WAAW,EAAEJ;IACf,CAAC;EACH,CAAC,CAAC;AACJ;AAEAK,MAAM,CAACC,OAAO,GAAGlC,0BAA0B"},"metadata":{},"sourceType":"script","externalDependencies":[]}