{"ast":null,"code":"'use strict';\n\nvar _assign = require('object-assign');\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @format\n * \n */\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\nvar Immutable = require('immutable');\nvar invariant = require('fbjs/lib/invariant');\nvar Map = Immutable.Map;\nvar instances = Map();\nvar instanceKey = 0;\n\n/**\n * Temporary utility for generating the warnings\n */\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({\n      type: type,\n      mutability: mutability,\n      data: data || {}\n    }));\n  },\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n    var newData = _extends({}, instance.getData(), toMerge);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\nmodule.exports = DraftEntity;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","DraftEntityInstance","Immutable","invariant","Map","instances","instanceKey","logWarning","oldMethodCall","newMethodCall","console","warn","DraftEntity","getLastCreatedEntityKey","__getLastCreatedEntityKey","create","type","mutability","data","__create","add","instance","__add","get","__get","mergeData","toMerge","__mergeData","replaceData","newData","__replaceData","set","process","env","NODE_ENV","getData","newInstance","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/DraftEntity.js"],"sourcesContent":["'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule DraftEntity\n * @format\n * \n */\n\nvar DraftEntityInstance = require('./DraftEntityInstance');\nvar Immutable = require('immutable');\n\nvar invariant = require('fbjs/lib/invariant');\n\nvar Map = Immutable.Map;\n\n\nvar instances = Map();\nvar instanceKey = 0;\n\n/**\n * Temporary utility for generating the warnings\n */\nfunction logWarning(oldMethodCall, newMethodCall) {\n  console.warn('WARNING: ' + oldMethodCall + ' will be deprecated soon!\\nPlease use \"' + newMethodCall + '\" instead.');\n}\n\n/**\n * A \"document entity\" is an object containing metadata associated with a\n * piece of text in a ContentBlock.\n *\n * For example, a `link` entity might include a `uri` property. When a\n * ContentBlock is rendered in the browser, text that refers to that link\n * entity may be rendered as an anchor, with the `uri` as the href value.\n *\n * In a ContentBlock, every position in the text may correspond to zero\n * or one entities. This correspondence is tracked using a key string,\n * generated via DraftEntity.create() and used to obtain entity metadata\n * via DraftEntity.get().\n */\nvar DraftEntity = {\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getLastCreatedEntityKey' instead.\n   * ---\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  getLastCreatedEntityKey: function getLastCreatedEntityKey() {\n    logWarning('DraftEntity.getLastCreatedEntityKey', 'contentState.getLastCreatedEntityKey');\n    return DraftEntity.__getLastCreatedEntityKey();\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.createEntity' instead.\n   * ---\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  create: function create(type, mutability, data) {\n    logWarning('DraftEntity.create', 'contentState.createEntity');\n    return DraftEntity.__create(type, mutability, data);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.addEntity' instead.\n   * ---\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  add: function add(instance) {\n    logWarning('DraftEntity.add', 'contentState.addEntity');\n    return DraftEntity.__add(instance);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.getEntity' instead.\n   * ---\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  get: function get(key) {\n    logWarning('DraftEntity.get', 'contentState.getEntity');\n    return DraftEntity.__get(key);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.mergeEntityData' instead.\n   * ---\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  mergeData: function mergeData(key, toMerge) {\n    logWarning('DraftEntity.mergeData', 'contentState.mergeEntityData');\n    return DraftEntity.__mergeData(key, toMerge);\n  },\n\n  /**\n   * WARNING: This method will be deprecated soon!\n   * Please use 'contentState.replaceEntityData' instead.\n   * ---\n   * Completely replace the data for a given instance.\n   */\n  replaceData: function replaceData(key, newData) {\n    logWarning('DraftEntity.replaceData', 'contentState.replaceEntityData');\n    return DraftEntity.__replaceData(key, newData);\n  },\n\n  // ***********************************WARNING******************************\n  // --- the above public API will be deprecated in the next version of Draft!\n  // The methods below this line are private - don't call them directly.\n\n  /**\n   * Get the random key string from whatever entity was last created.\n   * We need this to support the new API, as part of transitioning to put Entity\n   * storage in contentState.\n   */\n  __getLastCreatedEntityKey: function __getLastCreatedEntityKey() {\n    return '' + instanceKey;\n  },\n\n  /**\n   * Create a DraftEntityInstance and store it for later retrieval.\n   *\n   * A random key string will be generated and returned. This key may\n   * be used to track the entity's usage in a ContentBlock, and for\n   * retrieving data about the entity at render time.\n   */\n  __create: function __create(type, mutability, data) {\n    return DraftEntity.__add(new DraftEntityInstance({ type: type, mutability: mutability, data: data || {} }));\n  },\n\n  /**\n   * Add an existing DraftEntityInstance to the DraftEntity map. This is\n   * useful when restoring instances from the server.\n   */\n  __add: function __add(instance) {\n    var key = '' + ++instanceKey;\n    instances = instances.set(key, instance);\n    return key;\n  },\n\n  /**\n   * Retrieve the entity corresponding to the supplied key string.\n   */\n  __get: function __get(key) {\n    var instance = instances.get(key);\n    !!!instance ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Unknown DraftEntity key: %s.', key) : invariant(false) : void 0;\n    return instance;\n  },\n\n  /**\n   * Entity instances are immutable. If you need to update the data for an\n   * instance, this method will merge your data updates and return a new\n   * instance.\n   */\n  __mergeData: function __mergeData(key, toMerge) {\n    var instance = DraftEntity.__get(key);\n    var newData = _extends({}, instance.getData(), toMerge);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  },\n\n  /**\n   * Completely replace the data for a given instance.\n   */\n  __replaceData: function __replaceData(key, newData) {\n    var instance = DraftEntity.__get(key);\n    var newInstance = instance.set('data', newData);\n    instances = instances.set(key, newInstance);\n    return newInstance;\n  }\n};\n\nmodule.exports = DraftEntity;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}