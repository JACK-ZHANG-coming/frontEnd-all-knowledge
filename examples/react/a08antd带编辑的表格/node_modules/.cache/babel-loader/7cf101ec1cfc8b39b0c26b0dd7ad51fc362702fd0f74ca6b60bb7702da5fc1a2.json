{"ast":null,"code":"import PropTypes from 'prop-types';\nimport { isLabelInValue } from './util';\nvar internalValProp = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\nexport function genArrProps(propType) {\n  return PropTypes.oneOfType([propType, PropTypes.arrayOf(propType)]);\n}\n/**\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\n * But in process logic is already cover to array.\n * Check array is not necessary. Let's simplify this check logic.\n */\n\nexport function valueProp() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  var props = args[0],\n    propName = args[1],\n    Component = args[2];\n  if (isLabelInValue(props)) {\n    var _err = genArrProps(PropTypes.shape({\n      label: PropTypes.node,\n      value: internalValProp\n    })).apply(void 0, args);\n    if (_err) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\");\n    }\n    return null;\n  }\n  var err = genArrProps(internalValProp).apply(void 0, args);\n  if (err) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use string or [string] instead.\");\n  }\n  return null;\n}","map":{"version":3,"names":["PropTypes","isLabelInValue","internalValProp","oneOfType","string","number","genArrProps","propType","arrayOf","valueProp","_len","arguments","length","args","Array","_key","props","propName","Component","_err","shape","label","node","value","apply","Error","concat","err"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-tree-select/es/propTypes.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { isLabelInValue } from './util';\nvar internalValProp = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\nexport function genArrProps(propType) {\n  return PropTypes.oneOfType([propType, PropTypes.arrayOf(propType)]);\n}\n/**\n * Origin code check `multiple` is true when `treeCheckStrictly` & `labelInValue`.\n * But in process logic is already cover to array.\n * Check array is not necessary. Let's simplify this check logic.\n */\n\nexport function valueProp() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var props = args[0],\n      propName = args[1],\n      Component = args[2];\n\n  if (isLabelInValue(props)) {\n    var _err = genArrProps(PropTypes.shape({\n      label: PropTypes.node,\n      value: internalValProp\n    })).apply(void 0, args);\n\n    if (_err) {\n      return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use { label: string, value: string | number } or [{ label: string, value: string | number }] instead.\");\n    }\n\n    return null;\n  }\n\n  var err = genArrProps(internalValProp).apply(void 0, args);\n\n  if (err) {\n    return new Error(\"Invalid prop `\".concat(propName, \"` supplied to `\").concat(Component, \"`. \") + \"You should use string or [string] instead.\");\n  }\n\n  return null;\n}"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,SAASC,cAAc,QAAQ,QAAQ;AACvC,IAAIC,eAAe,GAAGF,SAAS,CAACG,SAAS,CAAC,CAACH,SAAS,CAACI,MAAM,EAAEJ,SAAS,CAACK,MAAM,CAAC,CAAC;AAC/E,OAAO,SAASC,WAAWA,CAACC,QAAQ,EAAE;EACpC,OAAOP,SAAS,CAACG,SAAS,CAAC,CAACI,QAAQ,EAAEP,SAAS,CAACQ,OAAO,CAACD,QAAQ,CAAC,CAAC,CAAC;AACrE;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,SAASA,CAAA,EAAG;EAC1B,KAAK,IAAIC,IAAI,GAAGC,SAAS,CAACC,MAAM,EAAEC,IAAI,GAAG,IAAIC,KAAK,CAACJ,IAAI,CAAC,EAAEK,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAGL,IAAI,EAAEK,IAAI,EAAE,EAAE;IACvFF,IAAI,CAACE,IAAI,CAAC,GAAGJ,SAAS,CAACI,IAAI,CAAC;EAC9B;EAEA,IAAIC,KAAK,GAAGH,IAAI,CAAC,CAAC,CAAC;IACfI,QAAQ,GAAGJ,IAAI,CAAC,CAAC,CAAC;IAClBK,SAAS,GAAGL,IAAI,CAAC,CAAC,CAAC;EAEvB,IAAIZ,cAAc,CAACe,KAAK,CAAC,EAAE;IACzB,IAAIG,IAAI,GAAGb,WAAW,CAACN,SAAS,CAACoB,KAAK,CAAC;MACrCC,KAAK,EAAErB,SAAS,CAACsB,IAAI;MACrBC,KAAK,EAAErB;IACT,CAAC,CAAC,CAAC,CAACsB,KAAK,CAAC,KAAK,CAAC,EAAEX,IAAI,CAAC;IAEvB,IAAIM,IAAI,EAAE;MACR,OAAO,IAAIM,KAAK,CAAC,gBAAgB,CAACC,MAAM,CAACT,QAAQ,EAAE,iBAAiB,CAAC,CAACS,MAAM,CAACR,SAAS,EAAE,KAAK,CAAC,GAAG,kHAAkH,CAAC;IACtN;IAEA,OAAO,IAAI;EACb;EAEA,IAAIS,GAAG,GAAGrB,WAAW,CAACJ,eAAe,CAAC,CAACsB,KAAK,CAAC,KAAK,CAAC,EAAEX,IAAI,CAAC;EAE1D,IAAIc,GAAG,EAAE;IACP,OAAO,IAAIF,KAAK,CAAC,gBAAgB,CAACC,MAAM,CAACT,QAAQ,EAAE,iBAAiB,CAAC,CAACS,MAAM,CAACR,SAAS,EAAE,KAAK,CAAC,GAAG,4CAA4C,CAAC;EAChJ;EAEA,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}