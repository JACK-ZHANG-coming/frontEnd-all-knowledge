{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule removeRangeFromContentState\n * @format\n * \n */\n\n'use strict';\n\nvar ContentBlockNode = require('./ContentBlockNode');\nvar Immutable = require('immutable');\nvar getNextDelimiterBlockKey = require('./getNextDelimiterBlockKey');\nvar List = Immutable.List,\n  Map = Immutable.Map;\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n  var block = blockMap.get(key);\n  if (!block) {\n    return;\n  }\n  blockMap.set(key, func(block));\n};\n\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */\nvar getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n  var parents = [];\n  if (!blockKey) {\n    return parents;\n  }\n  var blockNode = blockMap.get(blockKey);\n  while (blockNode && blockNode.getParentKey()) {\n    var parentKey = blockNode.getParentKey();\n    if (parentKey) {\n      parents.push(parentKey);\n    }\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\n  }\n  return parents;\n};\n\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */\nvar getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n  var nextDelimiters = [];\n  if (!block) {\n    return nextDelimiters;\n  }\n  var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\n    var _block = blockMap.get(nextDelimiter);\n    nextDelimiters.push(nextDelimiter);\n\n    // we do not need to keep checking all root node siblings, just the first occurance\n    nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n  }\n  return nextDelimiters;\n};\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  }\n\n  // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n  var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\n    nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n  }\n  return nextValidSiblingKey;\n};\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  }\n\n  // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n  var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\n    prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n  }\n  return prevValidSiblingKey;\n};\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n  return blockMap.withMutations(function (blocks) {\n    // update start block if its retained\n    transformBlock(startBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update endblock if its retained\n    transformBlock(endBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(endBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update start block parent ancestors\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      return transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n\n    // update start block next - can only happen if startBlock == endBlock\n    transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: startBlock.getPrevSiblingKey()\n      });\n    });\n\n    // update start block prev\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update end block next\n    transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update end block prev\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: endBlock.getNextSiblingKey()\n      });\n    });\n\n    // update end block parent ancestors\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n\n    // update next delimiters all the way to a root delimiter\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {\n      return transformBlock(delimiterKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n  });\n};\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n  if (selectionState.isCollapsed()) {\n    return contentState;\n  }\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n  var startBlock = blockMap.get(startKey);\n  var endBlock = blockMap.get(endKey);\n\n  // we assume that ContentBlockNode and ContentBlocks are not mixed together\n  var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode;\n\n  // used to retain blocks that should not be deleted to avoid orphan children\n  var parentAncestors = [];\n  if (isExperimentalTreeBlock) {\n    var endBlockchildrenKeys = endBlock.getChildKeys();\n    var endBlockAncestors = getAncestorsKeys(endKey, blockMap);\n\n    // endBlock has unselected sibblings so we can not remove its ancestors parents\n    if (endBlock.getNextSiblingKey()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\n    }\n\n    // endBlock has children so can not remove this block or any of its ancestors\n    if (!endBlockchildrenKeys.isEmpty()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));\n    }\n\n    // we need to retain all ancestors of the next delimiter block\n    parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n  }\n  var characterList = void 0;\n  if (startBlock === endBlock) {\n    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n  } else {\n    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n  }\n  var modifiedStart = startBlock.merge({\n    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n    characterList: characterList\n  });\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).filter(function (_, k) {\n    return parentAncestors.indexOf(k) === -1;\n  }).concat(Map([[endKey, null]])).map(function (_, k) {\n    return k === startKey ? modifiedStart : null;\n  });\n  var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {\n    return !!block;\n  });\n  if (isExperimentalTreeBlock) {\n    updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n  }\n  return contentState.merge({\n    blockMap: updatedBlockMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: startKey,\n      anchorOffset: startOffset,\n      focusKey: startKey,\n      focusOffset: startOffset,\n      isBackward: false\n    })\n  });\n};\n\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */\nvar removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n  if (startOffset === 0) {\n    while (startOffset < endOffset) {\n      targetList = targetList.shift();\n      startOffset++;\n    }\n  } else if (endOffset === targetList.count()) {\n    while (endOffset > startOffset) {\n      targetList = targetList.pop();\n      endOffset--;\n    }\n  } else {\n    var head = targetList.slice(0, startOffset);\n    var tail = targetList.slice(endOffset);\n    targetList = head.concat(tail).toList();\n  }\n  return targetList;\n};\nmodule.exports = removeRangeFromContentState;","map":{"version":3,"names":["ContentBlockNode","require","Immutable","getNextDelimiterBlockKey","List","Map","transformBlock","key","blockMap","func","block","get","set","getAncestorsKeys","blockKey","parents","blockNode","getParentKey","parentKey","push","getNextDelimitersBlockKeys","nextDelimiters","nextDelimiter","_block","getNextValidSibling","originalBlockMap","nextValidSiblingKey","getKey","getNextSiblingKey","getPrevValidSibling","prevValidSiblingKey","getPrevSiblingKey","updateBlockMapLinks","startBlock","endBlock","withMutations","blocks","merge","nextSibling","prevSibling","forEach","children","getChildKeys","filter","delimiterKey","removeRangeFromContentState","contentState","selectionState","isCollapsed","getBlockMap","startKey","getStartKey","startOffset","getStartOffset","endKey","getEndKey","endOffset","getEndOffset","isExperimentalTreeBlock","parentAncestors","endBlockchildrenKeys","endBlockAncestors","concat","isEmpty","characterList","removeFromList","getCharacterList","slice","modifiedStart","text","getText","newBlocks","toSeq","skipUntil","_","k","takeUntil","indexOf","map","updatedBlockMap","selectionBefore","selectionAfter","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","targetList","shift","count","pop","head","tail","toList","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-core/node_modules/draft-js/lib/removeRangeFromContentState.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule removeRangeFromContentState\n * @format\n * \n */\n\n'use strict';\n\nvar ContentBlockNode = require('./ContentBlockNode');\nvar Immutable = require('immutable');\n\nvar getNextDelimiterBlockKey = require('./getNextDelimiterBlockKey');\n\nvar List = Immutable.List,\n    Map = Immutable.Map;\n\n\nvar transformBlock = function transformBlock(key, blockMap, func) {\n  if (!key) {\n    return;\n  }\n\n  var block = blockMap.get(key);\n\n  if (!block) {\n    return;\n  }\n\n  blockMap.set(key, func(block));\n};\n\n/**\n * Ancestors needs to be preserved when there are non selected\n * children to make sure we do not leave any orphans behind\n */\nvar getAncestorsKeys = function getAncestorsKeys(blockKey, blockMap) {\n  var parents = [];\n\n  if (!blockKey) {\n    return parents;\n  }\n\n  var blockNode = blockMap.get(blockKey);\n  while (blockNode && blockNode.getParentKey()) {\n    var parentKey = blockNode.getParentKey();\n    if (parentKey) {\n      parents.push(parentKey);\n    }\n    blockNode = parentKey ? blockMap.get(parentKey) : null;\n  }\n\n  return parents;\n};\n\n/**\n * Get all next delimiter keys until we hit a root delimiter and return\n * an array of key references\n */\nvar getNextDelimitersBlockKeys = function getNextDelimitersBlockKeys(block, blockMap) {\n  var nextDelimiters = [];\n\n  if (!block) {\n    return nextDelimiters;\n  }\n\n  var nextDelimiter = getNextDelimiterBlockKey(block, blockMap);\n  while (nextDelimiter && blockMap.get(nextDelimiter)) {\n    var _block = blockMap.get(nextDelimiter);\n    nextDelimiters.push(nextDelimiter);\n\n    // we do not need to keep checking all root node siblings, just the first occurance\n    nextDelimiter = _block.getParentKey() ? getNextDelimiterBlockKey(_block, blockMap) : null;\n  }\n\n  return nextDelimiters;\n};\n\nvar getNextValidSibling = function getNextValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  }\n\n  // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n  var nextValidSiblingKey = originalBlockMap.get(block.getKey()).getNextSiblingKey();\n\n  while (nextValidSiblingKey && !blockMap.get(nextValidSiblingKey)) {\n    nextValidSiblingKey = originalBlockMap.get(nextValidSiblingKey).getNextSiblingKey() || null;\n  }\n\n  return nextValidSiblingKey;\n};\n\nvar getPrevValidSibling = function getPrevValidSibling(block, blockMap, originalBlockMap) {\n  if (!block) {\n    return null;\n  }\n\n  // note that we need to make sure we refer to the original block since this\n  // function is called within a withMutations\n  var prevValidSiblingKey = originalBlockMap.get(block.getKey()).getPrevSiblingKey();\n\n  while (prevValidSiblingKey && !blockMap.get(prevValidSiblingKey)) {\n    prevValidSiblingKey = originalBlockMap.get(prevValidSiblingKey).getPrevSiblingKey() || null;\n  }\n\n  return prevValidSiblingKey;\n};\n\nvar updateBlockMapLinks = function updateBlockMapLinks(blockMap, startBlock, endBlock, originalBlockMap) {\n  return blockMap.withMutations(function (blocks) {\n    // update start block if its retained\n    transformBlock(startBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update endblock if its retained\n    transformBlock(endBlock.getKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(endBlock, blocks, originalBlockMap),\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update start block parent ancestors\n    getAncestorsKeys(startBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      return transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n\n    // update start block next - can only happen if startBlock == endBlock\n    transformBlock(startBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: startBlock.getPrevSiblingKey()\n      });\n    });\n\n    // update start block prev\n    transformBlock(startBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: getNextValidSibling(startBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update end block next\n    transformBlock(endBlock.getNextSiblingKey(), blocks, function (block) {\n      return block.merge({\n        prevSibling: getPrevValidSibling(endBlock, blocks, originalBlockMap)\n      });\n    });\n\n    // update end block prev\n    transformBlock(endBlock.getPrevSiblingKey(), blocks, function (block) {\n      return block.merge({\n        nextSibling: endBlock.getNextSiblingKey()\n      });\n    });\n\n    // update end block parent ancestors\n    getAncestorsKeys(endBlock.getKey(), originalBlockMap).forEach(function (parentKey) {\n      transformBlock(parentKey, blocks, function (block) {\n        return block.merge({\n          children: block.getChildKeys().filter(function (key) {\n            return blocks.get(key);\n          }),\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n\n    // update next delimiters all the way to a root delimiter\n    getNextDelimitersBlockKeys(endBlock, originalBlockMap).forEach(function (delimiterKey) {\n      return transformBlock(delimiterKey, blocks, function (block) {\n        return block.merge({\n          nextSibling: getNextValidSibling(block, blocks, originalBlockMap),\n          prevSibling: getPrevValidSibling(block, blocks, originalBlockMap)\n        });\n      });\n    });\n  });\n};\n\nvar removeRangeFromContentState = function removeRangeFromContentState(contentState, selectionState) {\n  if (selectionState.isCollapsed()) {\n    return contentState;\n  }\n\n  var blockMap = contentState.getBlockMap();\n  var startKey = selectionState.getStartKey();\n  var startOffset = selectionState.getStartOffset();\n  var endKey = selectionState.getEndKey();\n  var endOffset = selectionState.getEndOffset();\n\n  var startBlock = blockMap.get(startKey);\n  var endBlock = blockMap.get(endKey);\n\n  // we assume that ContentBlockNode and ContentBlocks are not mixed together\n  var isExperimentalTreeBlock = startBlock instanceof ContentBlockNode;\n\n  // used to retain blocks that should not be deleted to avoid orphan children\n  var parentAncestors = [];\n\n  if (isExperimentalTreeBlock) {\n    var endBlockchildrenKeys = endBlock.getChildKeys();\n    var endBlockAncestors = getAncestorsKeys(endKey, blockMap);\n\n    // endBlock has unselected sibblings so we can not remove its ancestors parents\n    if (endBlock.getNextSiblingKey()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors);\n    }\n\n    // endBlock has children so can not remove this block or any of its ancestors\n    if (!endBlockchildrenKeys.isEmpty()) {\n      parentAncestors = parentAncestors.concat(endBlockAncestors.concat([endKey]));\n    }\n\n    // we need to retain all ancestors of the next delimiter block\n    parentAncestors = parentAncestors.concat(getAncestorsKeys(getNextDelimiterBlockKey(endBlock, blockMap), blockMap));\n  }\n\n  var characterList = void 0;\n\n  if (startBlock === endBlock) {\n    characterList = removeFromList(startBlock.getCharacterList(), startOffset, endOffset);\n  } else {\n    characterList = startBlock.getCharacterList().slice(0, startOffset).concat(endBlock.getCharacterList().slice(endOffset));\n  }\n\n  var modifiedStart = startBlock.merge({\n    text: startBlock.getText().slice(0, startOffset) + endBlock.getText().slice(endOffset),\n    characterList: characterList\n  });\n\n  var newBlocks = blockMap.toSeq().skipUntil(function (_, k) {\n    return k === startKey;\n  }).takeUntil(function (_, k) {\n    return k === endKey;\n  }).filter(function (_, k) {\n    return parentAncestors.indexOf(k) === -1;\n  }).concat(Map([[endKey, null]])).map(function (_, k) {\n    return k === startKey ? modifiedStart : null;\n  });\n\n  var updatedBlockMap = blockMap.merge(newBlocks).filter(function (block) {\n    return !!block;\n  });\n\n  if (isExperimentalTreeBlock) {\n    updatedBlockMap = updateBlockMapLinks(updatedBlockMap, startBlock, endBlock, blockMap);\n  }\n\n  return contentState.merge({\n    blockMap: updatedBlockMap,\n    selectionBefore: selectionState,\n    selectionAfter: selectionState.merge({\n      anchorKey: startKey,\n      anchorOffset: startOffset,\n      focusKey: startKey,\n      focusOffset: startOffset,\n      isBackward: false\n    })\n  });\n};\n\n/**\n * Maintain persistence for target list when removing characters on the\n * head and tail of the character list.\n */\nvar removeFromList = function removeFromList(targetList, startOffset, endOffset) {\n  if (startOffset === 0) {\n    while (startOffset < endOffset) {\n      targetList = targetList.shift();\n      startOffset++;\n    }\n  } else if (endOffset === targetList.count()) {\n    while (endOffset > startOffset) {\n      targetList = targetList.pop();\n      endOffset--;\n    }\n  } else {\n    var head = targetList.slice(0, startOffset);\n    var tail = targetList.slice(endOffset);\n    targetList = head.concat(tail).toList();\n  }\n  return targetList;\n};\n\nmodule.exports = removeRangeFromContentState;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}