{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Usage note:\n * This module makes a best effort to export the same data we would internally.\n * At Facebook we use a server-generated module that does the parsing and\n * exports the data for the client to use. We can't rely on a server-side\n * implementation in open source so instead we make use of an open source\n * library to do the heavy lifting and then make some adjustments as necessary.\n * It's likely there will be some differences. Some we can smooth over.\n * Others are going to be harder.\n */\n\n'use strict';\n\nvar UAParser = require('ua-parser-js');\nvar UNKNOWN = 'Unknown';\nvar PLATFORM_MAP = {\n  'Mac OS': 'Mac OS X'\n};\n\n/**\n * Convert from UAParser platform name to what we expect.\n */\nfunction convertPlatformName(name) {\n  return PLATFORM_MAP[name] || name;\n}\n\n/**\n * Get the version number in parts. This is very naive. We actually get major\n * version as a part of UAParser already, which is generally good enough, but\n * let's get the minor just in case.\n */\nfunction getBrowserVersion(version) {\n  if (!version) {\n    return {\n      major: '',\n      minor: ''\n    };\n  }\n  var parts = version.split('.');\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n\n/**\n * Get the UA data fom UAParser and then convert it to the format we're\n * expecting for our APIS.\n */\nvar parser = new UAParser();\nvar results = parser.getResult();\n\n// Do some conversion first.\nvar browserVersionData = getBrowserVersion(results.browser.version);\nvar uaData = {\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\n  browserFullVersion: results.browser.version || UNKNOWN,\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\n  browserName: results.browser.name || UNKNOWN,\n  browserVersion: results.browser.major || UNKNOWN,\n  deviceName: results.device.model || UNKNOWN,\n  engineName: results.engine.name || UNKNOWN,\n  engineVersion: results.engine.version || UNKNOWN,\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\n  platformVersion: results.os.version || UNKNOWN,\n  platformFullVersion: results.os.version || UNKNOWN\n};\nmodule.exports = uaData;","map":{"version":3,"names":["UAParser","require","UNKNOWN","PLATFORM_MAP","convertPlatformName","name","getBrowserVersion","version","major","minor","parts","split","parser","results","getResult","browserVersionData","browser","uaData","browserArchitecture","cpu","architecture","browserFullVersion","browserMinorVersion","browserName","browserVersion","deviceName","device","model","engineName","engine","engineVersion","platformArchitecture","platformName","os","platformVersion","platformFullVersion","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/fbjs/lib/UserAgentData.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n/**\n * Usage note:\n * This module makes a best effort to export the same data we would internally.\n * At Facebook we use a server-generated module that does the parsing and\n * exports the data for the client to use. We can't rely on a server-side\n * implementation in open source so instead we make use of an open source\n * library to do the heavy lifting and then make some adjustments as necessary.\n * It's likely there will be some differences. Some we can smooth over.\n * Others are going to be harder.\n */\n\n'use strict';\n\nvar UAParser = require('ua-parser-js');\n\nvar UNKNOWN = 'Unknown';\n\nvar PLATFORM_MAP = {\n  'Mac OS': 'Mac OS X'\n};\n\n/**\n * Convert from UAParser platform name to what we expect.\n */\nfunction convertPlatformName(name) {\n  return PLATFORM_MAP[name] || name;\n}\n\n/**\n * Get the version number in parts. This is very naive. We actually get major\n * version as a part of UAParser already, which is generally good enough, but\n * let's get the minor just in case.\n */\nfunction getBrowserVersion(version) {\n  if (!version) {\n    return {\n      major: '',\n      minor: ''\n    };\n  }\n  var parts = version.split('.');\n  return {\n    major: parts[0],\n    minor: parts[1]\n  };\n}\n\n/**\n * Get the UA data fom UAParser and then convert it to the format we're\n * expecting for our APIS.\n */\nvar parser = new UAParser();\nvar results = parser.getResult();\n\n// Do some conversion first.\nvar browserVersionData = getBrowserVersion(results.browser.version);\nvar uaData = {\n  browserArchitecture: results.cpu.architecture || UNKNOWN,\n  browserFullVersion: results.browser.version || UNKNOWN,\n  browserMinorVersion: browserVersionData.minor || UNKNOWN,\n  browserName: results.browser.name || UNKNOWN,\n  browserVersion: results.browser.major || UNKNOWN,\n  deviceName: results.device.model || UNKNOWN,\n  engineName: results.engine.name || UNKNOWN,\n  engineVersion: results.engine.version || UNKNOWN,\n  platformArchitecture: results.cpu.architecture || UNKNOWN,\n  platformName: convertPlatformName(results.os.name) || UNKNOWN,\n  platformVersion: results.os.version || UNKNOWN,\n  platformFullVersion: results.os.version || UNKNOWN\n};\n\nmodule.exports = uaData;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,QAAQ,GAAGC,OAAO,CAAC,cAAc,CAAC;AAEtC,IAAIC,OAAO,GAAG,SAAS;AAEvB,IAAIC,YAAY,GAAG;EACjB,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA,SAASC,mBAAmBA,CAACC,IAAI,EAAE;EACjC,OAAOF,YAAY,CAACE,IAAI,CAAC,IAAIA,IAAI;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,OAAO,EAAE;EAClC,IAAI,CAACA,OAAO,EAAE;IACZ,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,KAAK,EAAE;IACT,CAAC;EACH;EACA,IAAIC,KAAK,GAAGH,OAAO,CAACI,KAAK,CAAC,GAAG,CAAC;EAC9B,OAAO;IACLH,KAAK,EAAEE,KAAK,CAAC,CAAC,CAAC;IACfD,KAAK,EAAEC,KAAK,CAAC,CAAC;EAChB,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,IAAIE,MAAM,GAAG,IAAIZ,QAAQ,CAAC,CAAC;AAC3B,IAAIa,OAAO,GAAGD,MAAM,CAACE,SAAS,CAAC,CAAC;;AAEhC;AACA,IAAIC,kBAAkB,GAAGT,iBAAiB,CAACO,OAAO,CAACG,OAAO,CAACT,OAAO,CAAC;AACnE,IAAIU,MAAM,GAAG;EACXC,mBAAmB,EAAEL,OAAO,CAACM,GAAG,CAACC,YAAY,IAAIlB,OAAO;EACxDmB,kBAAkB,EAAER,OAAO,CAACG,OAAO,CAACT,OAAO,IAAIL,OAAO;EACtDoB,mBAAmB,EAAEP,kBAAkB,CAACN,KAAK,IAAIP,OAAO;EACxDqB,WAAW,EAAEV,OAAO,CAACG,OAAO,CAACX,IAAI,IAAIH,OAAO;EAC5CsB,cAAc,EAAEX,OAAO,CAACG,OAAO,CAACR,KAAK,IAAIN,OAAO;EAChDuB,UAAU,EAAEZ,OAAO,CAACa,MAAM,CAACC,KAAK,IAAIzB,OAAO;EAC3C0B,UAAU,EAAEf,OAAO,CAACgB,MAAM,CAACxB,IAAI,IAAIH,OAAO;EAC1C4B,aAAa,EAAEjB,OAAO,CAACgB,MAAM,CAACtB,OAAO,IAAIL,OAAO;EAChD6B,oBAAoB,EAAElB,OAAO,CAACM,GAAG,CAACC,YAAY,IAAIlB,OAAO;EACzD8B,YAAY,EAAE5B,mBAAmB,CAACS,OAAO,CAACoB,EAAE,CAAC5B,IAAI,CAAC,IAAIH,OAAO;EAC7DgC,eAAe,EAAErB,OAAO,CAACoB,EAAE,CAAC1B,OAAO,IAAIL,OAAO;EAC9CiC,mBAAmB,EAAEtB,OAAO,CAACoB,EAAE,CAAC1B,OAAO,IAAIL;AAC7C,CAAC;AAEDkC,MAAM,CAACC,OAAO,GAAGpB,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}