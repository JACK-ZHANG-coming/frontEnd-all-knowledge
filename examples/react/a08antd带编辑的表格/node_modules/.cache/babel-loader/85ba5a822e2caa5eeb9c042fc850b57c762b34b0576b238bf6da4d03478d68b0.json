{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule encodeInlineStyleRanges\n * @format\n * \n */\n\n'use strict';\n\nvar UnicodeUtils = require('fbjs/lib/UnicodeUtils');\nvar findRangesImmutable = require('./findRangesImmutable');\nvar areEqual = function areEqual(a, b) {\n  return a === b;\n};\nvar isTruthy = function isTruthy(a) {\n  return !!a;\n};\nvar EMPTY_ARRAY = [];\n\n/**\n * Helper function for getting encoded styles for each inline style. Convert\n * to UTF-8 character counts for storage.\n */\nfunction getEncodedInlinesForType(block, styleList, styleToEncode) {\n  var ranges = [];\n\n  // Obtain an array with ranges for only the specified style.\n  var filteredInlines = styleList.map(function (style) {\n    return style.has(styleToEncode);\n  }).toList();\n  findRangesImmutable(filteredInlines, areEqual,\n  // We only want to keep ranges with nonzero style values.\n  isTruthy, function (start, end) {\n    var text = block.getText();\n    ranges.push({\n      offset: UnicodeUtils.strlen(text.slice(0, start)),\n      length: UnicodeUtils.strlen(text.slice(start, end)),\n      style: styleToEncode\n    });\n  });\n  return ranges;\n}\n\n/*\n * Retrieve the encoded arrays of inline styles, with each individual style\n * treated separately.\n */\nfunction encodeInlineStyleRanges(block) {\n  var styleList = block.getCharacterList().map(function (c) {\n    return c.getStyle();\n  }).toList();\n  var ranges = styleList.flatten().toSet().map(function (style) {\n    return getEncodedInlinesForType(block, styleList, style);\n  });\n  return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());\n}\nmodule.exports = encodeInlineStyleRanges;","map":{"version":3,"names":["UnicodeUtils","require","findRangesImmutable","areEqual","a","b","isTruthy","EMPTY_ARRAY","getEncodedInlinesForType","block","styleList","styleToEncode","ranges","filteredInlines","map","style","has","toList","start","end","text","getText","push","offset","strlen","slice","length","encodeInlineStyleRanges","getCharacterList","c","getStyle","flatten","toSet","Array","prototype","concat","apply","toJS","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/encodeInlineStyleRanges.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule encodeInlineStyleRanges\n * @format\n * \n */\n\n'use strict';\n\nvar UnicodeUtils = require('fbjs/lib/UnicodeUtils');\n\nvar findRangesImmutable = require('./findRangesImmutable');\n\nvar areEqual = function areEqual(a, b) {\n  return a === b;\n};\nvar isTruthy = function isTruthy(a) {\n  return !!a;\n};\nvar EMPTY_ARRAY = [];\n\n/**\n * Helper function for getting encoded styles for each inline style. Convert\n * to UTF-8 character counts for storage.\n */\nfunction getEncodedInlinesForType(block, styleList, styleToEncode) {\n  var ranges = [];\n\n  // Obtain an array with ranges for only the specified style.\n  var filteredInlines = styleList.map(function (style) {\n    return style.has(styleToEncode);\n  }).toList();\n\n  findRangesImmutable(filteredInlines, areEqual,\n  // We only want to keep ranges with nonzero style values.\n  isTruthy, function (start, end) {\n    var text = block.getText();\n    ranges.push({\n      offset: UnicodeUtils.strlen(text.slice(0, start)),\n      length: UnicodeUtils.strlen(text.slice(start, end)),\n      style: styleToEncode\n    });\n  });\n\n  return ranges;\n}\n\n/*\n * Retrieve the encoded arrays of inline styles, with each individual style\n * treated separately.\n */\nfunction encodeInlineStyleRanges(block) {\n  var styleList = block.getCharacterList().map(function (c) {\n    return c.getStyle();\n  }).toList();\n  var ranges = styleList.flatten().toSet().map(function (style) {\n    return getEncodedInlinesForType(block, styleList, style);\n  });\n\n  return Array.prototype.concat.apply(EMPTY_ARRAY, ranges.toJS());\n}\n\nmodule.exports = encodeInlineStyleRanges;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AAEnD,IAAIC,mBAAmB,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AAE1D,IAAIE,QAAQ,GAAG,SAASA,QAAQA,CAACC,CAAC,EAAEC,CAAC,EAAE;EACrC,OAAOD,CAAC,KAAKC,CAAC;AAChB,CAAC;AACD,IAAIC,QAAQ,GAAG,SAASA,QAAQA,CAACF,CAAC,EAAE;EAClC,OAAO,CAAC,CAACA,CAAC;AACZ,CAAC;AACD,IAAIG,WAAW,GAAG,EAAE;;AAEpB;AACA;AACA;AACA;AACA,SAASC,wBAAwBA,CAACC,KAAK,EAAEC,SAAS,EAAEC,aAAa,EAAE;EACjE,IAAIC,MAAM,GAAG,EAAE;;EAEf;EACA,IAAIC,eAAe,GAAGH,SAAS,CAACI,GAAG,CAAC,UAAUC,KAAK,EAAE;IACnD,OAAOA,KAAK,CAACC,GAAG,CAACL,aAAa,CAAC;EACjC,CAAC,CAAC,CAACM,MAAM,CAAC,CAAC;EAEXf,mBAAmB,CAACW,eAAe,EAAEV,QAAQ;EAC7C;EACAG,QAAQ,EAAE,UAAUY,KAAK,EAAEC,GAAG,EAAE;IAC9B,IAAIC,IAAI,GAAGX,KAAK,CAACY,OAAO,CAAC,CAAC;IAC1BT,MAAM,CAACU,IAAI,CAAC;MACVC,MAAM,EAAEvB,YAAY,CAACwB,MAAM,CAACJ,IAAI,CAACK,KAAK,CAAC,CAAC,EAAEP,KAAK,CAAC,CAAC;MACjDQ,MAAM,EAAE1B,YAAY,CAACwB,MAAM,CAACJ,IAAI,CAACK,KAAK,CAACP,KAAK,EAAEC,GAAG,CAAC,CAAC;MACnDJ,KAAK,EAAEJ;IACT,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOC,MAAM;AACf;;AAEA;AACA;AACA;AACA;AACA,SAASe,uBAAuBA,CAAClB,KAAK,EAAE;EACtC,IAAIC,SAAS,GAAGD,KAAK,CAACmB,gBAAgB,CAAC,CAAC,CAACd,GAAG,CAAC,UAAUe,CAAC,EAAE;IACxD,OAAOA,CAAC,CAACC,QAAQ,CAAC,CAAC;EACrB,CAAC,CAAC,CAACb,MAAM,CAAC,CAAC;EACX,IAAIL,MAAM,GAAGF,SAAS,CAACqB,OAAO,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAClB,GAAG,CAAC,UAAUC,KAAK,EAAE;IAC5D,OAAOP,wBAAwB,CAACC,KAAK,EAAEC,SAAS,EAAEK,KAAK,CAAC;EAC1D,CAAC,CAAC;EAEF,OAAOkB,KAAK,CAACC,SAAS,CAACC,MAAM,CAACC,KAAK,CAAC7B,WAAW,EAAEK,MAAM,CAACyB,IAAI,CAAC,CAAC,CAAC;AACjE;AAEAC,MAAM,CAACC,OAAO,GAAGZ,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}