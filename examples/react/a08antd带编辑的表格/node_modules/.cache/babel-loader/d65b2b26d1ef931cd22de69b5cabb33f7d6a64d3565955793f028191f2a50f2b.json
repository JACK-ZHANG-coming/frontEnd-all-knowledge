{"ast":null,"code":"import _classCallCheck from \"/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd\\u5E26\\u7F16\\u8F91\\u7684\\u8868\\u683C/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd\\u5E26\\u7F16\\u8F91\\u7684\\u8868\\u683C/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { makeRequestCall, makeRequestCallFromTimer } from './makeRequestCall.mjs';\nexport var AsapQueue = /*#__PURE__*/function () {\n  function AsapQueue() {\n    var _this = this;\n    _classCallCheck(this, AsapQueue);\n    this.queue = [];\n    // We queue errors to ensure they are thrown in right order (FIFO).\n    // Array-as-queue is good enough here, since we are just dealing with exceptions.\n    this.pendingErrors = [];\n    // Once a flush has been requested, no further calls to `requestFlush` are\n    // necessary until the next `flush` completes.\n    // @ts-ignore\n    this.flushing = false;\n    // The position of the next task to execute in the task queue. This is\n    // preserved between calls to `flush` so that it can be resumed if\n    // a task throws an exception.\n    this.index = 0;\n    // If a task schedules additional tasks recursively, the task queue can grow\n    // unbounded. To prevent memory exhaustion, the task queue will periodically\n    // truncate already-completed tasks.\n    this.capacity = 1024;\n    // The flush function processes all tasks that have been scheduled with\n    // `rawAsap` unless and until one of those tasks throws an exception.\n    // If a task throws an exception, `flush` ensures that its state will remain\n    // consistent and will resume where it left off when called again.\n    // However, `flush` does not make any arrangements to be called again if an\n    // exception is thrown.\n    this.flush = function () {\n      var q = _this.queue;\n      while (_this.index < q.length) {\n        var currentIndex = _this.index;\n        // Advance the index before calling the task. This ensures that we will\n        // begin flushing on the next task the task throws an error.\n        _this.index++;\n        q[currentIndex].call();\n        // Prevent leaking memory for long chains of recursive calls to `asap`.\n        // If we call `asap` within tasks scheduled by `asap`, the queue will\n        // grow, but to avoid an O(n) walk for every task we execute, we don't\n        // shift tasks off the queue after they have been executed.\n        // Instead, we periodically shift 1024 tasks off the queue.\n        if (_this.index > _this.capacity) {\n          // Manually shift all values starting at the index back to the\n          // beginning of the queue.\n          for (var scan = 0, newLength = q.length - _this.index; scan < newLength; scan++) {\n            q[scan] = q[scan + _this.index];\n          }\n          q.length -= _this.index;\n          _this.index = 0;\n        }\n      }\n      q.length = 0;\n      _this.index = 0;\n      _this.flushing = false;\n    };\n    // In a web browser, exceptions are not fatal. However, to avoid\n    // slowing down the queue of pending tasks, we rethrow the error in a\n    // lower priority turn.\n    this.registerPendingError = function (err) {\n      _this.pendingErrors.push(err);\n      _this.requestErrorThrow();\n    };\n    // `requestFlush` requests that the high priority event queue be flushed as\n    // soon as possible.\n    // This is useful to prevent an error thrown in a task from stalling the event\n    // queue if the exception handled by Node.js’s\n    // `process.on(\"uncaughtException\")` or by a domain.\n    // `requestFlush` is implemented using a strategy based on data collected from\n    // every available SauceLabs Selenium web driver worker at time of writing.\n    // https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n    this.requestFlush = makeRequestCall(this.flush);\n    this.requestErrorThrow = makeRequestCallFromTimer(function () {\n      // Throw first error\n      if (_this.pendingErrors.length) {\n        throw _this.pendingErrors.shift();\n      }\n    });\n  }\n  _createClass(AsapQueue, [{\n    key: \"enqueueTask\",\n    value:\n    // Use the fastest means possible to execute a task in its own turn, with\n    // priority over other events including IO, animation, reflow, and redraw\n    // events in browsers.\n    //\n    // An exception thrown by a task will permanently interrupt the processing of\n    // subsequent tasks. The higher level `asap` function ensures that if an\n    // exception is thrown by a task, that the task queue will continue flushing as\n    // soon as possible, but if you use `rawAsap` directly, you are responsible to\n    // either ensure that no exceptions are thrown from your task, or to manually\n    // call `rawAsap.requestFlush` if an exception is thrown.\n    function enqueueTask(task) {\n      var q = this.queue,\n        requestFlush = this.requestFlush;\n      if (!q.length) {\n        requestFlush();\n        this.flushing = true;\n      }\n      // Equivalent to push, but avoids a function call.\n      q[q.length] = task;\n    }\n  }]);\n  return AsapQueue;\n}(); // The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// // its existence.\n// rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js","map":{"version":3,"names":["makeRequestCall","makeRequestCallFromTimer","AsapQueue","_this","_classCallCheck","queue","pendingErrors","flushing","index","capacity","flush","q","length","currentIndex","call","scan","newLength","registerPendingError","err","push","requestErrorThrow","requestFlush","shift","_createClass","key","value","enqueueTask","task"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/react-dnd/node_modules/@react-dnd/asap/src/AsapQueue.ts"],"sourcesContent":["/* eslint-disable no-restricted-globals, @typescript-eslint/ban-ts-comment, @typescript-eslint/no-unused-vars, @typescript-eslint/no-non-null-assertion */\nimport type { Task } from './types.js'\nimport { makeRequestCall, makeRequestCallFromTimer } from './makeRequestCall.js'\n\nexport class AsapQueue {\n\tprivate queue: Task[] = []\n\t// We queue errors to ensure they are thrown in right order (FIFO).\n\t// Array-as-queue is good enough here, since we are just dealing with exceptions.\n\tprivate pendingErrors: any[] = []\n\t// Once a flush has been requested, no further calls to `requestFlush` are\n\t// necessary until the next `flush` completes.\n\t// @ts-ignore\n\tprivate flushing = false\n\t// `requestFlush` is an implementation-specific method that attempts to kick\n\t// off a `flush` event as quickly as possible. `flush` will attempt to exhaust\n\t// the event queue before yielding to the browser's own event loop.\n\tprivate requestFlush: () => void\n\n\tprivate requestErrorThrow: () => void\n\t// The position of the next task to execute in the task queue. This is\n\t// preserved between calls to `flush` so that it can be resumed if\n\t// a task throws an exception.\n\tprivate index = 0\n\t// If a task schedules additional tasks recursively, the task queue can grow\n\t// unbounded. To prevent memory exhaustion, the task queue will periodically\n\t// truncate already-completed tasks.\n\tprivate capacity = 1024\n\n\tpublic constructor() {\n\t\t// `requestFlush` requests that the high priority event queue be flushed as\n\t\t// soon as possible.\n\t\t// This is useful to prevent an error thrown in a task from stalling the event\n\t\t// queue if the exception handled by Node.js’s\n\t\t// `process.on(\"uncaughtException\")` or by a domain.\n\n\t\t// `requestFlush` is implemented using a strategy based on data collected from\n\t\t// every available SauceLabs Selenium web driver worker at time of writing.\n\t\t// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593\n\t\tthis.requestFlush = makeRequestCall(this.flush)\n\t\tthis.requestErrorThrow = makeRequestCallFromTimer(() => {\n\t\t\t// Throw first error\n\t\t\tif (this.pendingErrors.length) {\n\t\t\t\tthrow this.pendingErrors.shift()\n\t\t\t}\n\t\t})\n\t}\n\n\t// Use the fastest means possible to execute a task in its own turn, with\n\t// priority over other events including IO, animation, reflow, and redraw\n\t// events in browsers.\n\t//\n\t// An exception thrown by a task will permanently interrupt the processing of\n\t// subsequent tasks. The higher level `asap` function ensures that if an\n\t// exception is thrown by a task, that the task queue will continue flushing as\n\t// soon as possible, but if you use `rawAsap` directly, you are responsible to\n\t// either ensure that no exceptions are thrown from your task, or to manually\n\t// call `rawAsap.requestFlush` if an exception is thrown.\n\tpublic enqueueTask(task: Task): void {\n\t\tconst { queue: q, requestFlush } = this\n\t\tif (!q.length) {\n\t\t\trequestFlush()\n\t\t\tthis.flushing = true\n\t\t}\n\t\t// Equivalent to push, but avoids a function call.\n\t\tq[q.length] = task\n\t}\n\n\t// The flush function processes all tasks that have been scheduled with\n\t// `rawAsap` unless and until one of those tasks throws an exception.\n\t// If a task throws an exception, `flush` ensures that its state will remain\n\t// consistent and will resume where it left off when called again.\n\t// However, `flush` does not make any arrangements to be called again if an\n\t// exception is thrown.\n\tprivate flush = () => {\n\t\tconst { queue: q } = this\n\t\twhile (this.index < q.length) {\n\t\t\tconst currentIndex = this.index\n\t\t\t// Advance the index before calling the task. This ensures that we will\n\t\t\t// begin flushing on the next task the task throws an error.\n\t\t\tthis.index++\n\t\t\tq[currentIndex]!.call()\n\t\t\t// Prevent leaking memory for long chains of recursive calls to `asap`.\n\t\t\t// If we call `asap` within tasks scheduled by `asap`, the queue will\n\t\t\t// grow, but to avoid an O(n) walk for every task we execute, we don't\n\t\t\t// shift tasks off the queue after they have been executed.\n\t\t\t// Instead, we periodically shift 1024 tasks off the queue.\n\t\t\tif (this.index > this.capacity) {\n\t\t\t\t// Manually shift all values starting at the index back to the\n\t\t\t\t// beginning of the queue.\n\t\t\t\tfor (\n\t\t\t\t\tlet scan = 0, newLength = q.length - this.index;\n\t\t\t\t\tscan < newLength;\n\t\t\t\t\tscan++\n\t\t\t\t) {\n\t\t\t\t\tq[scan] = q[scan + this.index]!\n\t\t\t\t}\n\t\t\t\tq.length -= this.index\n\t\t\t\tthis.index = 0\n\t\t\t}\n\t\t}\n\t\tq.length = 0\n\t\tthis.index = 0\n\t\tthis.flushing = false\n\t}\n\n\t// In a web browser, exceptions are not fatal. However, to avoid\n\t// slowing down the queue of pending tasks, we rethrow the error in a\n\t// lower priority turn.\n\tpublic registerPendingError = (err: any) => {\n\t\tthis.pendingErrors.push(err)\n\t\tthis.requestErrorThrow()\n\t}\n}\n\n// The message channel technique was discovered by Malte Ubl and was the\n// original foundation for this library.\n// http://www.nonblocking.io/2011/06/windownexttick.html\n\n// Safari 6.0.5 (at least) intermittently fails to create message ports on a\n// page's first load. Thankfully, this version of Safari supports\n// MutationObservers, so we don't need to fall back in that case.\n\n// function makeRequestCallFromMessageChannel(callback) {\n//     var channel = new MessageChannel();\n//     channel.port1.onmessage = callback;\n//     return function requestCall() {\n//         channel.port2.postMessage(0);\n//     };\n// }\n\n// For reasons explained above, we are also unable to use `setImmediate`\n// under any circumstances.\n// Even if we were, there is another bug in Internet Explorer 10.\n// It is not sufficient to assign `setImmediate` to `requestFlush` because\n// `setImmediate` must be called *by name* and therefore must be wrapped in a\n// closure.\n// Never forget.\n\n// function makeRequestCallFromSetImmediate(callback) {\n//     return function requestCall() {\n//         setImmediate(callback);\n//     };\n// }\n\n// Safari 6.0 has a problem where timers will get lost while the user is\n// scrolling. This problem does not impact ASAP because Safari 6.0 supports\n// mutation observers, so that implementation is used instead.\n// However, if we ever elect to use timers in Safari, the prevalent work-around\n// is to add a scroll event listener that calls for a flush.\n\n// `setTimeout` does not call the passed callback if the delay is less than\n// approximately 7 in web workers in Firefox 8 through 18, and sometimes not\n// even then.\n\n// This is for `asap.js` only.\n// Its name will be periodically randomized to break any code that depends on\n// // its existence.\n// rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer\n\n// ASAP was originally a nextTick shim included in Q. This was factored out\n// into this ASAP package. It was later adapted to RSVP which made further\n// amendments. These decisions, particularly to marginalize MessageChannel and\n// to capture the MutationObserver implementation in a closure, were integrated\n// back into ASAP proper.\n// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}