{"ast":null,"code":"import { invariant } from '@react-dnd/invariant';\nimport { setClientOffset } from './local/setClientOffset';\nimport { isObject } from '../../utils/js_utils';\nimport { BEGIN_DRAG, INIT_COORDS } from './types';\nvar ResetCoordinatesAction = {\n  type: INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\nexport function createBeginDrag(manager) {\n  return function beginDrag() {\n    var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    var _options$publishSourc = options.publishSource,\n      publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,\n      clientOffset = options.clientOffset,\n      getSourceClientOffset = options.getSourceClientOffset;\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    var sourceId = getDraggableSource(sourceIds, monitor);\n    if (sourceId === null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n    var sourceClientOffset = null;\n    if (clientOffset) {\n      if (!getSourceClientOffset) {\n        throw new Error('getSourceClientOffset must be defined');\n      }\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n    var source = registry.getSource(sourceId);\n    var item = source.beginDrag(monitor, sourceId); // If source.beginDrag returns null, this is an indicator to cancel the drag\n\n    if (item == null) {\n      return undefined;\n    }\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    var itemType = registry.getSourceType(sourceId);\n    return {\n      type: BEGIN_DRAG,\n      payload: {\n        itemType: itemType,\n        item: item,\n        sourceId: sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\nfunction verifyItemIsObject(item) {\n  invariant(isObject(item), 'Item must be an object.');\n}\nfunction getDraggableSource(sourceIds, monitor) {\n  var sourceId = null;\n  for (var i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n  return sourceId;\n}","map":{"version":3,"names":["invariant","setClientOffset","isObject","BEGIN_DRAG","INIT_COORDS","ResetCoordinatesAction","type","payload","clientOffset","sourceClientOffset","createBeginDrag","manager","beginDrag","sourceIds","arguments","length","undefined","options","publishSource","_options$publishSourc","getSourceClientOffset","monitor","getMonitor","registry","getRegistry","dispatch","verifyInvariants","sourceId","getDraggableSource","Error","verifyGetSourceClientOffsetIsFunction","source","getSource","item","verifyItemIsObject","pinSource","itemType","getSourceType","isSourcePublic","isDragging","forEach","i","canDragSource"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/react-dnd/node_modules/dnd-core/dist/esm/actions/dragDrop/beginDrag.js"],"sourcesContent":["import { invariant } from '@react-dnd/invariant';\nimport { setClientOffset } from './local/setClientOffset';\nimport { isObject } from '../../utils/js_utils';\nimport { BEGIN_DRAG, INIT_COORDS } from './types';\nvar ResetCoordinatesAction = {\n  type: INIT_COORDS,\n  payload: {\n    clientOffset: null,\n    sourceClientOffset: null\n  }\n};\nexport function createBeginDrag(manager) {\n  return function beginDrag() {\n    var sourceIds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      publishSource: true\n    };\n    var _options$publishSourc = options.publishSource,\n        publishSource = _options$publishSourc === void 0 ? true : _options$publishSourc,\n        clientOffset = options.clientOffset,\n        getSourceClientOffset = options.getSourceClientOffset;\n    var monitor = manager.getMonitor();\n    var registry = manager.getRegistry(); // Initialize the coordinates using the client offset\n\n    manager.dispatch(setClientOffset(clientOffset));\n    verifyInvariants(sourceIds, monitor, registry); // Get the draggable source\n\n    var sourceId = getDraggableSource(sourceIds, monitor);\n\n    if (sourceId === null) {\n      manager.dispatch(ResetCoordinatesAction);\n      return;\n    } // Get the source client offset\n\n\n    var sourceClientOffset = null;\n\n    if (clientOffset) {\n      if (!getSourceClientOffset) {\n        throw new Error('getSourceClientOffset must be defined');\n      }\n\n      verifyGetSourceClientOffsetIsFunction(getSourceClientOffset);\n      sourceClientOffset = getSourceClientOffset(sourceId);\n    } // Initialize the full coordinates\n\n\n    manager.dispatch(setClientOffset(clientOffset, sourceClientOffset));\n    var source = registry.getSource(sourceId);\n    var item = source.beginDrag(monitor, sourceId); // If source.beginDrag returns null, this is an indicator to cancel the drag\n\n    if (item == null) {\n      return undefined;\n    }\n\n    verifyItemIsObject(item);\n    registry.pinSource(sourceId);\n    var itemType = registry.getSourceType(sourceId);\n    return {\n      type: BEGIN_DRAG,\n      payload: {\n        itemType: itemType,\n        item: item,\n        sourceId: sourceId,\n        clientOffset: clientOffset || null,\n        sourceClientOffset: sourceClientOffset || null,\n        isSourcePublic: !!publishSource\n      }\n    };\n  };\n}\n\nfunction verifyInvariants(sourceIds, monitor, registry) {\n  invariant(!monitor.isDragging(), 'Cannot call beginDrag while dragging.');\n  sourceIds.forEach(function (sourceId) {\n    invariant(registry.getSource(sourceId), 'Expected sourceIds to be registered.');\n  });\n}\n\nfunction verifyGetSourceClientOffsetIsFunction(getSourceClientOffset) {\n  invariant(typeof getSourceClientOffset === 'function', 'When clientOffset is provided, getSourceClientOffset must be a function.');\n}\n\nfunction verifyItemIsObject(item) {\n  invariant(isObject(item), 'Item must be an object.');\n}\n\nfunction getDraggableSource(sourceIds, monitor) {\n  var sourceId = null;\n\n  for (var i = sourceIds.length - 1; i >= 0; i--) {\n    if (monitor.canDragSource(sourceIds[i])) {\n      sourceId = sourceIds[i];\n      break;\n    }\n  }\n\n  return sourceId;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}