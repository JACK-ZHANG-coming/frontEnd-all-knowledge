{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBlur\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\nvar containsNode = require('fbjs/lib/containsNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\nfunction editOnBlur(editor, e) {\n  // In a contentEditable element, when you select a range and then click\n  // another active element, this does trigger a `blur` event but will not\n  // remove the DOM selection from the contenteditable.\n  // This is consistent across all browsers, but we prefer that the editor\n  // behave like a textarea, where a `blur` event clears the DOM selection.\n  // We therefore force the issue to be certain, checking whether the active\n  // element is `body` to force it when blurring occurs within the window (as\n  // opposed to clicking to another tab or window).\n  if (getActiveElement() === document.body) {\n    var _selection = global.getSelection();\n    var editorNode = editor.editor;\n    if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n      _selection.removeAllRanges();\n    }\n  }\n  var editorState = editor._latestEditorState;\n  var currentSelection = editorState.getSelection();\n  if (!currentSelection.getHasFocus()) {\n    return;\n  }\n  var selection = currentSelection.set('hasFocus', false);\n  editor.props.onBlur && editor.props.onBlur(e);\n  editor.update(EditorState.acceptSelection(editorState, selection));\n}\nmodule.exports = editOnBlur;","map":{"version":3,"names":["EditorState","require","containsNode","getActiveElement","editOnBlur","editor","e","document","body","_selection","global","getSelection","editorNode","rangeCount","anchorNode","focusNode","removeAllRanges","editorState","_latestEditorState","currentSelection","getHasFocus","selection","set","props","onBlur","update","acceptSelection","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-mention/node_modules/draft-js/lib/editOnBlur.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule editOnBlur\n * @format\n * \n */\n\n'use strict';\n\nvar EditorState = require('./EditorState');\n\nvar containsNode = require('fbjs/lib/containsNode');\nvar getActiveElement = require('fbjs/lib/getActiveElement');\n\nfunction editOnBlur(editor, e) {\n  // In a contentEditable element, when you select a range and then click\n  // another active element, this does trigger a `blur` event but will not\n  // remove the DOM selection from the contenteditable.\n  // This is consistent across all browsers, but we prefer that the editor\n  // behave like a textarea, where a `blur` event clears the DOM selection.\n  // We therefore force the issue to be certain, checking whether the active\n  // element is `body` to force it when blurring occurs within the window (as\n  // opposed to clicking to another tab or window).\n  if (getActiveElement() === document.body) {\n    var _selection = global.getSelection();\n    var editorNode = editor.editor;\n    if (_selection.rangeCount === 1 && containsNode(editorNode, _selection.anchorNode) && containsNode(editorNode, _selection.focusNode)) {\n      _selection.removeAllRanges();\n    }\n  }\n\n  var editorState = editor._latestEditorState;\n  var currentSelection = editorState.getSelection();\n  if (!currentSelection.getHasFocus()) {\n    return;\n  }\n\n  var selection = currentSelection.set('hasFocus', false);\n  editor.props.onBlur && editor.props.onBlur(e);\n  editor.update(EditorState.acceptSelection(editorState, selection));\n}\n\nmodule.exports = editOnBlur;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,YAAY;;AAEZ,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE1C,IAAIC,YAAY,GAAGD,OAAO,CAAC,uBAAuB,CAAC;AACnD,IAAIE,gBAAgB,GAAGF,OAAO,CAAC,2BAA2B,CAAC;AAE3D,SAASG,UAAUA,CAACC,MAAM,EAAEC,CAAC,EAAE;EAC7B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIH,gBAAgB,CAAC,CAAC,KAAKI,QAAQ,CAACC,IAAI,EAAE;IACxC,IAAIC,UAAU,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAC;IACtC,IAAIC,UAAU,GAAGP,MAAM,CAACA,MAAM;IAC9B,IAAII,UAAU,CAACI,UAAU,KAAK,CAAC,IAAIX,YAAY,CAACU,UAAU,EAAEH,UAAU,CAACK,UAAU,CAAC,IAAIZ,YAAY,CAACU,UAAU,EAAEH,UAAU,CAACM,SAAS,CAAC,EAAE;MACpIN,UAAU,CAACO,eAAe,CAAC,CAAC;IAC9B;EACF;EAEA,IAAIC,WAAW,GAAGZ,MAAM,CAACa,kBAAkB;EAC3C,IAAIC,gBAAgB,GAAGF,WAAW,CAACN,YAAY,CAAC,CAAC;EACjD,IAAI,CAACQ,gBAAgB,CAACC,WAAW,CAAC,CAAC,EAAE;IACnC;EACF;EAEA,IAAIC,SAAS,GAAGF,gBAAgB,CAACG,GAAG,CAAC,UAAU,EAAE,KAAK,CAAC;EACvDjB,MAAM,CAACkB,KAAK,CAACC,MAAM,IAAInB,MAAM,CAACkB,KAAK,CAACC,MAAM,CAAClB,CAAC,CAAC;EAC7CD,MAAM,CAACoB,MAAM,CAACzB,WAAW,CAAC0B,eAAe,CAACT,WAAW,EAAEI,SAAS,CAAC,CAAC;AACpE;AAEAM,MAAM,CAACC,OAAO,GAAGxB,UAAU"},"metadata":{},"sourceType":"script","externalDependencies":[]}