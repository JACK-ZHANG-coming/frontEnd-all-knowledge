{"ast":null,"code":"/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EditorState\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\nvar _extends = _assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n  return target;\n};\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nvar BlockTree = require('./BlockTree');\nvar ContentState = require('./ContentState');\nvar EditorBidiService = require('./EditorBidiService');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\nvar OrderedSet = Immutable.OrderedSet,\n  Record = Immutable.Record,\n  Stack = Immutable.Stack;\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\nvar EditorStateRecord = Record(defaultRecord);\nvar EditorState = function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(''), decorator);\n  };\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n      decorator = config.decorator;\n    var recordConfig = _extends({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n      var newContent = put.currentContent || editorState.getCurrentContent();\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n      var existingContent = editorState.getCurrentContent();\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n      state.merge(put);\n    });\n    return new EditorState(map);\n  };\n  EditorState.prototype.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n  EditorState.prototype.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n  EditorState.prototype.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n  EditorState.prototype.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n  EditorState.prototype.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n  EditorState.prototype.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n  EditorState.prototype.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n  EditorState.prototype.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n  EditorState.prototype.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n  EditorState.prototype.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n  EditorState.prototype.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  };\n\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n\n  EditorState.prototype.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, {\n      inlineStyleOverride: inlineStyleOverride\n    });\n  };\n\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n\n  EditorState.prototype.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n    if (override != null) {\n      return override;\n    }\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n  EditorState.prototype.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n  EditorState.prototype.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n  EditorState.prototype.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n  EditorState.prototype.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  };\n\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  };\n\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n    return updateSelection(editorState, selection, true);\n  };\n\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  };\n\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  };\n\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n    var forceSelection = changeType !== 'insert-characters';\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n    var inlineStyleOverride = editorState.getInlineStyleOverride();\n\n    // Don't discard inline style overrides for the following change types:\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n    return EditorState.set(editorState, editorStateChanges);\n  };\n\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  };\n\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  };\n\n  /**\n   * Not for public consumption.\n   */\n\n  function EditorState(immutable) {\n    _classCallCheck(this, EditorState);\n    this._immutable = immutable;\n  }\n\n  /**\n   * Not for public consumption.\n   */\n\n  EditorState.prototype.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n  return EditorState;\n}();\n\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If there is a character just inside the selection, use its style.\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  }\n\n  // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n  if (lastNonEmpty) return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  return OrderedSet();\n}\nmodule.exports = EditorState;","map":{"version":3,"names":["_assign","require","_extends","target","i","arguments","length","source","key","Object","prototype","hasOwnProperty","call","_classCallCheck","instance","Constructor","TypeError","BlockTree","ContentState","EditorBidiService","Immutable","SelectionState","OrderedSet","Record","Stack","defaultRecord","allowUndo","currentContent","decorator","directionMap","forceSelection","inCompositionMode","inlineStyleOverride","lastChangeType","nativelyRenderedContent","redoStack","selection","treeMap","undoStack","EditorStateRecord","EditorState","createEmpty","createWithContent","createFromText","contentState","firstKey","getBlockMap","first","getKey","create","config","recordConfig","generateNewTreeMap","getDirectionMap","set","editorState","put","map","getImmutable","withMutations","state","existingDecorator","get","newContent","getCurrentContent","newTreeMap","regenerateTreeForNewDecorator","merge","existingContent","regenerateTreeForNewBlocks","getEntityMap","toJS","getAllowUndo","getUndoStack","getRedoStack","getSelection","getDecorator","isInCompositionMode","mustForceSelection","getNativelyRenderedContent","getLastChangeType","getInlineStyleOverride","setInlineStyleOverride","getCurrentInlineStyle","override","content","isCollapsed","getInlineStyleForCollapsedSelection","getInlineStyleForNonCollapsedSelection","getBlockTree","blockKey","getIn","isSelectionAtStartOfContent","hasEdgeWithin","isSelectionAtEndOfContent","blockMap","last","end","getLength","acceptSelection","updateSelection","getHasFocus","moveSelectionToEnd","lastBlock","getLastBlock","lastKey","anchorKey","anchorOffset","focusKey","focusOffset","isBackward","moveFocusToEnd","afterSelectionMove","push","changeType","getSelectionAfter","mustBecomeBoundary","getSelectionBefore","overrideChangeTypes","indexOf","editorStateChanges","undo","newCurrentContent","peek","shift","redo","immutable","_immutable","block","generate","toOrderedMap","newBlockMap","newEntityMap","prevBlockMap","prevTreeMap","toSeq","filter","previousTreeMap","getDecorations","startKey","getStartKey","startOffset","getStartOffset","startBlock","getBlockForKey","getInlineStyleAt","lookUpwardForInlineStyle","fromKey","lastNonEmpty","reverse","skipUntil","_","k","skip","module","exports"],"sources":["/Users/zhangqiang/Documents/GitHub/frontEnd-all-knowledge/examples/react/a08antd带编辑的表格/node_modules/rc-editor-core/node_modules/draft-js/lib/EditorState.js"],"sourcesContent":["/**\n * Copyright (c) 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * LICENSE file in the root directory of this source tree. An additional grant\n * of patent rights can be found in the PATENTS file in the same directory.\n *\n * @providesModule EditorState\n * @format\n * \n */\n\n'use strict';\n\nvar _assign = require('object-assign');\n\nvar _extends = _assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar BlockTree = require('./BlockTree');\nvar ContentState = require('./ContentState');\nvar EditorBidiService = require('./EditorBidiService');\nvar Immutable = require('immutable');\nvar SelectionState = require('./SelectionState');\n\nvar OrderedSet = Immutable.OrderedSet,\n    Record = Immutable.Record,\n    Stack = Immutable.Stack;\n\n\nvar defaultRecord = {\n  allowUndo: true,\n  currentContent: null,\n  decorator: null,\n  directionMap: null,\n  forceSelection: false,\n  inCompositionMode: false,\n  inlineStyleOverride: null,\n  lastChangeType: null,\n  nativelyRenderedContent: null,\n  redoStack: Stack(),\n  selection: null,\n  treeMap: null,\n  undoStack: Stack()\n};\n\nvar EditorStateRecord = Record(defaultRecord);\n\nvar EditorState = function () {\n  EditorState.createEmpty = function createEmpty(decorator) {\n    return EditorState.createWithContent(ContentState.createFromText(''), decorator);\n  };\n\n  EditorState.createWithContent = function createWithContent(contentState, decorator) {\n    var firstKey = contentState.getBlockMap().first().getKey();\n    return EditorState.create({\n      currentContent: contentState,\n      undoStack: Stack(),\n      redoStack: Stack(),\n      decorator: decorator || null,\n      selection: SelectionState.createEmpty(firstKey)\n    });\n  };\n\n  EditorState.create = function create(config) {\n    var currentContent = config.currentContent,\n        decorator = config.decorator;\n\n    var recordConfig = _extends({}, config, {\n      treeMap: generateNewTreeMap(currentContent, decorator),\n      directionMap: EditorBidiService.getDirectionMap(currentContent)\n    });\n    return new EditorState(new EditorStateRecord(recordConfig));\n  };\n\n  EditorState.set = function set(editorState, put) {\n    var map = editorState.getImmutable().withMutations(function (state) {\n      var existingDecorator = state.get('decorator');\n      var decorator = existingDecorator;\n      if (put.decorator === null) {\n        decorator = null;\n      } else if (put.decorator) {\n        decorator = put.decorator;\n      }\n\n      var newContent = put.currentContent || editorState.getCurrentContent();\n\n      if (decorator !== existingDecorator) {\n        var treeMap = state.get('treeMap');\n        var newTreeMap;\n        if (decorator && existingDecorator) {\n          newTreeMap = regenerateTreeForNewDecorator(newContent, newContent.getBlockMap(), treeMap, decorator, existingDecorator);\n        } else {\n          newTreeMap = generateNewTreeMap(newContent, decorator);\n        }\n\n        state.merge({\n          decorator: decorator,\n          treeMap: newTreeMap,\n          nativelyRenderedContent: null\n        });\n        return;\n      }\n\n      var existingContent = editorState.getCurrentContent();\n      if (newContent !== existingContent) {\n        state.set('treeMap', regenerateTreeForNewBlocks(editorState, newContent.getBlockMap(), newContent.getEntityMap(), decorator));\n      }\n\n      state.merge(put);\n    });\n\n    return new EditorState(map);\n  };\n\n  EditorState.prototype.toJS = function toJS() {\n    return this.getImmutable().toJS();\n  };\n\n  EditorState.prototype.getAllowUndo = function getAllowUndo() {\n    return this.getImmutable().get('allowUndo');\n  };\n\n  EditorState.prototype.getCurrentContent = function getCurrentContent() {\n    return this.getImmutable().get('currentContent');\n  };\n\n  EditorState.prototype.getUndoStack = function getUndoStack() {\n    return this.getImmutable().get('undoStack');\n  };\n\n  EditorState.prototype.getRedoStack = function getRedoStack() {\n    return this.getImmutable().get('redoStack');\n  };\n\n  EditorState.prototype.getSelection = function getSelection() {\n    return this.getImmutable().get('selection');\n  };\n\n  EditorState.prototype.getDecorator = function getDecorator() {\n    return this.getImmutable().get('decorator');\n  };\n\n  EditorState.prototype.isInCompositionMode = function isInCompositionMode() {\n    return this.getImmutable().get('inCompositionMode');\n  };\n\n  EditorState.prototype.mustForceSelection = function mustForceSelection() {\n    return this.getImmutable().get('forceSelection');\n  };\n\n  EditorState.prototype.getNativelyRenderedContent = function getNativelyRenderedContent() {\n    return this.getImmutable().get('nativelyRenderedContent');\n  };\n\n  EditorState.prototype.getLastChangeType = function getLastChangeType() {\n    return this.getImmutable().get('lastChangeType');\n  };\n\n  /**\n   * While editing, the user may apply inline style commands with a collapsed\n   * cursor, intending to type text that adopts the specified style. In this\n   * case, we track the specified style as an \"override\" that takes precedence\n   * over the inline style of the text adjacent to the cursor.\n   *\n   * If null, there is no override in place.\n   */\n\n\n  EditorState.prototype.getInlineStyleOverride = function getInlineStyleOverride() {\n    return this.getImmutable().get('inlineStyleOverride');\n  };\n\n  EditorState.setInlineStyleOverride = function setInlineStyleOverride(editorState, inlineStyleOverride) {\n    return EditorState.set(editorState, { inlineStyleOverride: inlineStyleOverride });\n  };\n\n  /**\n   * Get the appropriate inline style for the editor state. If an\n   * override is in place, use it. Otherwise, the current style is\n   * based on the location of the selection state.\n   */\n\n\n  EditorState.prototype.getCurrentInlineStyle = function getCurrentInlineStyle() {\n    var override = this.getInlineStyleOverride();\n    if (override != null) {\n      return override;\n    }\n\n    var content = this.getCurrentContent();\n    var selection = this.getSelection();\n\n    if (selection.isCollapsed()) {\n      return getInlineStyleForCollapsedSelection(content, selection);\n    }\n\n    return getInlineStyleForNonCollapsedSelection(content, selection);\n  };\n\n  EditorState.prototype.getBlockTree = function getBlockTree(blockKey) {\n    return this.getImmutable().getIn(['treeMap', blockKey]);\n  };\n\n  EditorState.prototype.isSelectionAtStartOfContent = function isSelectionAtStartOfContent() {\n    var firstKey = this.getCurrentContent().getBlockMap().first().getKey();\n    return this.getSelection().hasEdgeWithin(firstKey, 0, 0);\n  };\n\n  EditorState.prototype.isSelectionAtEndOfContent = function isSelectionAtEndOfContent() {\n    var content = this.getCurrentContent();\n    var blockMap = content.getBlockMap();\n    var last = blockMap.last();\n    var end = last.getLength();\n    return this.getSelection().hasEdgeWithin(last.getKey(), end, end);\n  };\n\n  EditorState.prototype.getDirectionMap = function getDirectionMap() {\n    return this.getImmutable().get('directionMap');\n  };\n\n  /**\n   * Incorporate native DOM selection changes into the EditorState. This\n   * method can be used when we simply want to accept whatever the DOM\n   * has given us to represent selection, and we do not need to re-render\n   * the editor.\n   *\n   * To forcibly move the DOM selection, see `EditorState.forceSelection`.\n   */\n\n\n  EditorState.acceptSelection = function acceptSelection(editorState, selection) {\n    return updateSelection(editorState, selection, false);\n  };\n\n  /**\n   * At times, we need to force the DOM selection to be where we\n   * need it to be. This can occur when the anchor or focus nodes\n   * are non-text nodes, for instance. In this case, we want to trigger\n   * a re-render of the editor, which in turn forces selection into\n   * the correct place in the DOM. The `forceSelection` method\n   * accomplishes this.\n   *\n   * This method should be used in cases where you need to explicitly\n   * move the DOM selection from one place to another without a change\n   * in ContentState.\n   */\n\n\n  EditorState.forceSelection = function forceSelection(editorState, selection) {\n    if (!selection.getHasFocus()) {\n      selection = selection.set('hasFocus', true);\n    }\n    return updateSelection(editorState, selection, true);\n  };\n\n  /**\n   * Move selection to the end of the editor without forcing focus.\n   */\n\n\n  EditorState.moveSelectionToEnd = function moveSelectionToEnd(editorState) {\n    var content = editorState.getCurrentContent();\n    var lastBlock = content.getLastBlock();\n    var lastKey = lastBlock.getKey();\n    var length = lastBlock.getLength();\n\n    return EditorState.acceptSelection(editorState, new SelectionState({\n      anchorKey: lastKey,\n      anchorOffset: length,\n      focusKey: lastKey,\n      focusOffset: length,\n      isBackward: false\n    }));\n  };\n\n  /**\n   * Force focus to the end of the editor. This is useful in scenarios\n   * where we want to programmatically focus the input and it makes sense\n   * to allow the user to continue working seamlessly.\n   */\n\n\n  EditorState.moveFocusToEnd = function moveFocusToEnd(editorState) {\n    var afterSelectionMove = EditorState.moveSelectionToEnd(editorState);\n    return EditorState.forceSelection(afterSelectionMove, afterSelectionMove.getSelection());\n  };\n\n  /**\n   * Push the current ContentState onto the undo stack if it should be\n   * considered a boundary state, and set the provided ContentState as the\n   * new current content.\n   */\n\n\n  EditorState.push = function push(editorState, contentState, changeType) {\n    if (editorState.getCurrentContent() === contentState) {\n      return editorState;\n    }\n\n    var forceSelection = changeType !== 'insert-characters';\n    var directionMap = EditorBidiService.getDirectionMap(contentState, editorState.getDirectionMap());\n\n    if (!editorState.getAllowUndo()) {\n      return EditorState.set(editorState, {\n        currentContent: contentState,\n        directionMap: directionMap,\n        lastChangeType: changeType,\n        selection: contentState.getSelectionAfter(),\n        forceSelection: forceSelection,\n        inlineStyleOverride: null\n      });\n    }\n\n    var selection = editorState.getSelection();\n    var currentContent = editorState.getCurrentContent();\n    var undoStack = editorState.getUndoStack();\n    var newContent = contentState;\n\n    if (selection !== currentContent.getSelectionAfter() || mustBecomeBoundary(editorState, changeType)) {\n      undoStack = undoStack.push(currentContent);\n      newContent = newContent.set('selectionBefore', selection);\n    } else if (changeType === 'insert-characters' || changeType === 'backspace-character' || changeType === 'delete-character') {\n      // Preserve the previous selection.\n      newContent = newContent.set('selectionBefore', currentContent.getSelectionBefore());\n    }\n\n    var inlineStyleOverride = editorState.getInlineStyleOverride();\n\n    // Don't discard inline style overrides for the following change types:\n    var overrideChangeTypes = ['adjust-depth', 'change-block-type', 'split-block'];\n\n    if (overrideChangeTypes.indexOf(changeType) === -1) {\n      inlineStyleOverride = null;\n    }\n\n    var editorStateChanges = {\n      currentContent: newContent,\n      directionMap: directionMap,\n      undoStack: undoStack,\n      redoStack: Stack(),\n      lastChangeType: changeType,\n      selection: contentState.getSelectionAfter(),\n      forceSelection: forceSelection,\n      inlineStyleOverride: inlineStyleOverride\n    };\n\n    return EditorState.set(editorState, editorStateChanges);\n  };\n\n  /**\n   * Make the top ContentState in the undo stack the new current content and\n   * push the current content onto the redo stack.\n   */\n\n\n  EditorState.undo = function undo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var undoStack = editorState.getUndoStack();\n    var newCurrentContent = undoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: undoStack.shift(),\n      redoStack: editorState.getRedoStack().push(currentContent),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'undo',\n      nativelyRenderedContent: null,\n      selection: currentContent.getSelectionBefore()\n    });\n  };\n\n  /**\n   * Make the top ContentState in the redo stack the new current content and\n   * push the current content onto the undo stack.\n   */\n\n\n  EditorState.redo = function redo(editorState) {\n    if (!editorState.getAllowUndo()) {\n      return editorState;\n    }\n\n    var redoStack = editorState.getRedoStack();\n    var newCurrentContent = redoStack.peek();\n    if (!newCurrentContent) {\n      return editorState;\n    }\n\n    var currentContent = editorState.getCurrentContent();\n    var directionMap = EditorBidiService.getDirectionMap(newCurrentContent, editorState.getDirectionMap());\n\n    return EditorState.set(editorState, {\n      currentContent: newCurrentContent,\n      directionMap: directionMap,\n      undoStack: editorState.getUndoStack().push(currentContent),\n      redoStack: redoStack.shift(),\n      forceSelection: true,\n      inlineStyleOverride: null,\n      lastChangeType: 'redo',\n      nativelyRenderedContent: null,\n      selection: newCurrentContent.getSelectionAfter()\n    });\n  };\n\n  /**\n   * Not for public consumption.\n   */\n\n\n  function EditorState(immutable) {\n    _classCallCheck(this, EditorState);\n\n    this._immutable = immutable;\n  }\n\n  /**\n   * Not for public consumption.\n   */\n\n\n  EditorState.prototype.getImmutable = function getImmutable() {\n    return this._immutable;\n  };\n\n  return EditorState;\n}();\n\n/**\n * Set the supplied SelectionState as the new current selection, and set\n * the `force` flag to trigger manual selection placement by the view.\n */\n\n\nfunction updateSelection(editorState, selection, forceSelection) {\n  return EditorState.set(editorState, {\n    selection: selection,\n    forceSelection: forceSelection,\n    nativelyRenderedContent: null,\n    inlineStyleOverride: null\n  });\n}\n\n/**\n * Regenerate the entire tree map for a given ContentState and decorator.\n * Returns an OrderedMap that maps all available ContentBlock objects.\n */\nfunction generateNewTreeMap(contentState, decorator) {\n  return contentState.getBlockMap().map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }).toOrderedMap();\n}\n\n/**\n * Regenerate tree map objects for all ContentBlocks that have changed\n * between the current editorState and newContent. Returns an OrderedMap\n * with only changed regenerated tree map objects.\n */\nfunction regenerateTreeForNewBlocks(editorState, newBlockMap, newEntityMap, decorator) {\n  var contentState = editorState.getCurrentContent().set('entityMap', newEntityMap);\n  var prevBlockMap = contentState.getBlockMap();\n  var prevTreeMap = editorState.getImmutable().get('treeMap');\n  return prevTreeMap.merge(newBlockMap.toSeq().filter(function (block, key) {\n    return block !== prevBlockMap.get(key);\n  }).map(function (block) {\n    return BlockTree.generate(contentState, block, decorator);\n  }));\n}\n\n/**\n * Generate tree map objects for a new decorator object, preserving any\n * decorations that are unchanged from the previous decorator.\n *\n * Note that in order for this to perform optimally, decoration Lists for\n * decorators should be preserved when possible to allow for direct immutable\n * List comparison.\n */\nfunction regenerateTreeForNewDecorator(content, blockMap, previousTreeMap, decorator, existingDecorator) {\n  return previousTreeMap.merge(blockMap.toSeq().filter(function (block) {\n    return decorator.getDecorations(block, content) !== existingDecorator.getDecorations(block, content);\n  }).map(function (block) {\n    return BlockTree.generate(content, block, decorator);\n  }));\n}\n\n/**\n * Return whether a change should be considered a boundary state, given\n * the previous change type. Allows us to discard potential boundary states\n * during standard typing or deletion behavior.\n */\nfunction mustBecomeBoundary(editorState, changeType) {\n  var lastChangeType = editorState.getLastChangeType();\n  return changeType !== lastChangeType || changeType !== 'insert-characters' && changeType !== 'backspace-character' && changeType !== 'delete-character';\n}\n\nfunction getInlineStyleForCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If the cursor is not at the start of the block, look backward to\n  // preserve the style of the preceding character.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // The caret is at position zero in this block. If the block has any\n  // text at all, use the style of the first character.\n  if (startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(0);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction getInlineStyleForNonCollapsedSelection(content, selection) {\n  var startKey = selection.getStartKey();\n  var startOffset = selection.getStartOffset();\n  var startBlock = content.getBlockForKey(startKey);\n\n  // If there is a character just inside the selection, use its style.\n  if (startOffset < startBlock.getLength()) {\n    return startBlock.getInlineStyleAt(startOffset);\n  }\n\n  // Check if the selection at the end of a non-empty block. Use the last\n  // style in the block.\n  if (startOffset > 0) {\n    return startBlock.getInlineStyleAt(startOffset - 1);\n  }\n\n  // Otherwise, look upward in the document to find the closest character.\n  return lookUpwardForInlineStyle(content, startKey);\n}\n\nfunction lookUpwardForInlineStyle(content, fromKey) {\n  var lastNonEmpty = content.getBlockMap().reverse().skipUntil(function (_, k) {\n    return k === fromKey;\n  }).skip(1).skipUntil(function (block, _) {\n    return block.getLength();\n  }).first();\n\n  if (lastNonEmpty) return lastNonEmpty.getInlineStyleAt(lastNonEmpty.getLength() - 1);\n  return OrderedSet();\n}\n\nmodule.exports = EditorState;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}